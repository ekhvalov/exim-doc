
.. _ch06_00:

==========================================
Файл конфигурации Exim во время выполнения
==========================================

Во время выполнения, Exim использует один конфигурационный файл (“run time configuration file”), читаемый каждый раз при выполнении двоичного файла Exim`a. Обратите внимание, что в нормальных условиях, это происходит часто, поскольку Exim спроектирован для работы распределённым способом, без центрального контроля.

Если при чтении конфигурационного файла обнаруживается синтаксическая ошибка, Exim записывает сообщение на стандартный поток ошибок, и выходит с ненулевым кодом возврата. Также записывается сообщение в лог паники. 

.. note:: В это время могут быть детектированы лишь простые синтаксические ошибки. Значения любых раскрываемых параметров не проверяются, пока не произойдёт раскрытие, даже когда раскрытие не изменяет строку.

Имя файла рабочей конфигурации (“run time configuration file”) вкомпилено в бинарник по соображениям безопасности, и указывается параметром сборки “CONFIGURE_FILE”. В большинстве конфигураций, она задаёт единственный файл. Однако, разрешается задать список имён файлов, разделённых двоеточиями, в этом случае Exim использует первый существующий файл из списка.

Файл рабочей конфигурации должен принадлежать пользователю root, или пользователю, заданному во время компиляции параметром “CONFIGURE_OWNER” (если установлено). Конфигурационный файл не должен быть читаемым для всех или для группы, исключая группу указанную при компиляции в параметре “EXIM_GROUP” или в параметре “CONFIGURE_GROUP”.

.. warning:: В обычной конфигурации, где бинарный файл Exim`a - setuid root`a, любой кто имеет право редактировать файл рабочей конфигурации, обладает простым способом запускать команды от root`a. Если вы делаете ваших почтовых администраторов членами группы Exim, но не доверяете им права root, убедитесь, что рабочая конфигурация не доступна на запись группе.

Файл конфигурации по умолчанию, который будет корректно работать в простых ситуациях, предоставлен в файле “src/configure.default”. Если параметр “CONFIGURE_FILE” задаёт лишь одно имя файла, процесс установки копирует конфигурационный файл по умолчанию в новый файл, если он не существовал [#]_. Если “CONFIGURE_FILE” - список, он не инсталлируется автоматически. Глава :ref:`7 <ch07_00>` - обсуждение “сквозного контроля” заданной по умолчанию конфигурации.


.. _ch06_01:

--------------------------------------
Использование иного файла конфигурации
--------------------------------------

Одноразовая альтернативная конфигурация может быть задана использованием параметра **-C** командной строки, которая может задать единственный файл, или список файлов. Однако, когда используется параметр **-C**, Exim отменяет свои root`овые привилегии, за исключением запуска его root`ом или пользователем Exim`a (или, если параметр для **-C** идентичен со встроенным значением из *CONFIGURE_FILE*). Параметр **-C**, главным образом, полезна для проверки синтаксиса конфигурационного файла до его инсталляции. Проверки владельца и группы, для конфигурационного файла заданного параметром **-C**, не проводятся.

Привилегированное использование параметра **-C** пользователем Exim`a может быть заблокировано установкой *ALT_CONFIG_ROOT_ONLY* в *Local/Makefile*, при сборке Exim`a. Однако, если вы это сделаете, вы также заблокируете возможность тестирования конфигурационного файла с использованием параметра **-C**, на приём сообщений и доставку, даже если Exim будет вызван от пользователя root. Приём работает, но к тому времени Exim работает от своего пользователя, таким образом когда он перезапускает себя для возвращения root`овых привилегий, для доставки, использование параметра **-C** заставляет его потерять права доступа. Однако root может тестировать приём и доставку, используя две разные команды (одна для помещения сообщения в очередь - **-odq**, и другая для доставки - **-M**).

Если *ALT_CONFIG_PREFIX* задан в *Local/Makefile*, он определяет строку префикса, с которой должен начинаться любой файл в параметре командной строки **-C**. Кроме того, имя файла не должно содержать последовательность “/../”. Нет настройки по умолчанию для *ALT_CONFIG_PREFIX*; когда он не задан, любое имя файла может использоваться с параметром **-C**.

Одноразовые изменения конфигурации могут быть заданы параметром командной строки **-D**, определяющей и отменяющей значения для макросов используемых в конфигурационном файле. Однако, как и **-C**, использование этого параметра непривилегированными пользователями вынуждает Exim отменить свои root`овые права. Если в *Local/Makefile* задан параметр *DISABLE_D_OPTION*, использование параметра **-D** полностью отключено, и попытка её использования вызывает немедленный выход с ошибкой.

Некоторые серверы могут использовать один и тот же бинарник Exim`a на различных машинах с совместно используемой файловой системой, но используя разные конфигурационные файлы на каждой машине. Если в *Local/Makefile* задан параметр *CONFIGURE_FILE_USE_NODE*, Exim вначале ищет конфигурационный файл с именем конфигурационного файла, сопровождаемого точкой и именем узла машины, полученным из функции *uname()*. Если файл не существует, используется стандартное имя. Эта обработка происходит для каждого имени файла из списка заданного *CONFIGURE_FILE* или **-C**.

В некоторых тайных [#]_ ситуациях различные версии Exim`a могут быть запущены под разными эффективными uid и определен параметр *CONFIGURE_FILE_USE_EUID* чтобы помочь этому. Смотрите комментарии в *src/EDITME* для деталей.


.. _ch06_02:

-------------------------
Формат файла конфигурации
-------------------------

Файл конфигурации Exim`a разделён на множество частей. Общие параметры настройки должны всегда быть в начале файла. Другие части являются необязательными и могут фигурировать в любом порядке. Каждая часть, кроме первой, вводится словом начинающимся с *begin*, сопровождаемым именем части. Необязательные части:

* *ACL*: Списки контроля доступа для контроля входящей SMTP почты (смотрите главу :ref:`40 <ch40_00>`).
* *authenticators*: Конфигурационные настройки для драйверов аутентификации. Они связаны с командой SMTP AUTH (смотрите главу :ref:`33 <ch33_00>`).
* *routers*: Конфигурационные настройки для драйверов маршрутизаторов. Маршрутизаторы обрабатывают адреса и определяют как сообщение необходимо доставлять (смотрите главы :ref:`15 <ch15_00>`-:ref:`22 <ch22_00>`).
* *transports*: Конфигурационные настройки для драйверов транспортов. Транспорты задают механизмы для копирования сообщения в места назначения смотрите главы :ref:`24 <ch24_00>`-:ref:`30 <ch30_00>`).
* *retry*: Правила повторов, для использования когда сообщение не может быть доставлено немедленно. Если секция повторов отсутствует, или если она пустая (т.е. - правил повторов не задано), Exim не повторяет доставки. В этой ситуации, временные ошибки обрабатываются как постоянные. Правила повторов рассматриваются в главе :ref:`32 <ch32_00>`.
* *rewrite*: Правила глобальной перезаписи адресов, для использования когда сообщение приходит и когда новые адреса созданы во время доставки. Перезапись рассмотрена в главе :ref:`31 <ch31_00>`.
* *local_scan*: Частный параметр для функции *local_scan()*. Если вы хотите использовать эту возможность, вы должны задать::

    LOCAL_SCAN_HAS_OPTIONS=yes

в *Local/Makefile* до сборки Exim. Детали о *local_scan()* даны в главе :ref:`42 <ch42_00>`. 

Начальные и замыкающие пробелы в строках конфигурации всегда игнорируются.

Пустые строки в файле, и строки начинающиеся с символа # (игнорируя начальное пустое пространство) обрабатываются как комментарии и игнорируются. Примечание: Символ # кроме как в начале строки не обрабатывается специальным образом, и не является комментарием.

Любая строка не являющаяся комментарием может быть продолжена, если её завершить символом обратного слэша (\). Обратите внимание, что общее правило, для пустого пространства, означает, что появление пробелов после обратного слэша и начальных пробелов в начале строк продолжения игнорируется. Строки комментариев, начинающиеся с # (но не пустые строки), могут появиться в середине последовательности строк продолжения.

Удобный способ создания конфигурационного файла заключается в том, чтобы начать с файла по умолчанию, представленного в *src/configure.default*, и добавлять, удалять или изменять настройки как требуется.

ACL`ы, правила повторов, и правила перезаписи имеют их собственный синтаксис, который описан в главах :ref:`40 <ch40_00>`, :ref:`32 <ch32_00>` и :ref:`31 <ch31_00>` соответственно. Другие части конфигурационного файла имеют некоторые общие синтаксические пункты, и они описаны ниже, от раздела :ref:`6.10 <ch06_10>` и далее. До этого описаны средства включения, макрокоманд и условий средств.

.. _ch06_03:

------------------------------------
Включения файлов в файл конфигурации
------------------------------------

Вы можете включать другие файлы внутри файла рабочей конфигурации Exim`a, используя этот синтаксис::

    .include <file name>
    .include_if_exists <file name>

в отдельных строках. Двойные кавычки вокруг имени файла - необязательны. Если вы используете первую форму, если файл не существует, происходит ошибка конфигурации; вторая форма, ничего не делает, в случае несуществующих файлов. Во всех случаях, требуются абсолютные имена.

Включенный файл может быть на любой глубине вложенности, но помните, что Exim часто читает конфигурационный файл, поэтому хорошей идеей будет хранить их на минимальной глубине. Если вы меняете содержимое включаемого файла, вы должны дать даемону сигнал HUP, поскольку включенный файл в момент чтения конфигурации в режиме доступа - только на чтение.
      
Обработка включений происходит рано, на физическом уровне строки, таким образом, как и строки комментариев, включения могут использоваться в середине параметра настройки, например::

    hosts_lookup = a.b.c \
                   .include /some/file


Процесс включения происходит после обработки макрокоманд (смотрите ниже). Этот эффект обрабатывает включенные строки так, как будто они находятся в месте, где произошло включение.


.. _ch06_04:

--------------------------------
Макросы в конфигурационном файле
--------------------------------

Если строка, в основной части конфигурации (т.е. до первой строки “begin”), начинается с символа верхнего регистра, она берётся как макроопределение, и должна иметь форму::

    <name> = <rest of line><name> = <rest of line>


Имя должно состоять из букв, цифр и символов подчёркивания, и нет необходимости, чтобы все они были в верхнем регистре, хотя это рекомендуется. Оставшаяся часть строки, включая любое продолжение, является текстом замены, и из неё удаляется начальное и завершающее пустое пространство. Кавычки не удаляются. Текст замены не может завершаться символом обратного слэша, но это несерьёзное ограничение.

Макрос, также может быть задан между маршрутизатором и транспортом, аутентификатором, или определением ACL. Однако, они не могут быть определены внутри определённых драйверов или ACL, или в **local_scan**, или секции повторов конфигурации.


.. _ch06_05:

----------------
Макроподстановка
----------------

Как только макрос определён, все последующие строки файла (и любых включенных файлов) сканируются на предмет имени макроса; если есть несколько макросов, строки сканируются по очереди их оправления, для каждого макроса. Текст замены не сканируется повторно, для текущей макрокоманды, хотя он сканируется для впоследствии заданных макросов. Поэтому, имена макрокоманд, не могут содержать, как подстроку, имя ранее заданного макроса. Например, вы могли бы задать::

    ABCD_XYZ = <something>
    ABCD = <something else>

но помещение объявлений в обратном порядке, вызвало бы конфигурационную ошибку. Раскрытие макросов применяется к индивидуальным физическим строкам файла, до проверки продолжения строки или включений (смотрите выше). Если строка состоит лишь из имени макроса, и раскрытие макроса пустое, строка игнорируется. Макрос, в начале строки, может превратить строку в строку комментария, или в строку ``.include``.


.. _ch06_06:

Переопределение макроса
-----------------------

После определения, значение макроса может быть переопределено позднее, в конфигурации (или в включенном файле). Переопределение задаётся использованием “==” вместо “=”. Например::

    MAC =  initial value
    ...
    MAC == updated value

Переопределение не меняет порядок в котором макрос применяется к последующим строкам конфигурации. Порядок остаётся тем же самым, в котором макросы были изначально заданы. Всё, что изменяется, - значение макроса. Переопределение позволяет накапливать значения. Например::

    MAC =  initial value
    ...
    MAC == MAC and something added

Это может быть полезным в ситуации, когда конфигурационный файл собирается из множества других файлов.

.. _ch06_07:

-----------------------
Отмена значения макроса
-----------------------

Набор значений для макроса, в конфигурационном файле, может быть отменён параметром **-D** командной строки, но при его использовании, Exim снимает свои root`овые права, если он вызван не root`ом или пользователем Exim`a. Задание параметра **-D**, в командной строке, заставляет игнорироваться все определения и переопределения в пределах файла.


.. _ch06_08:

----------------------------
Пример использования макроса
----------------------------

Как пример макроса, рассмотрим конфигурацию, где синонимы ищутся в ДБ MySQL. Это помогает оставить файл менее беспорядочным, если длинные строки, например SQL-запросы, определены отдельно, как макрос, например::

    ALIAS_QUERY = select mailbox from user where \
                  login='${quote_mysql:$local_part}';

Тогда это может использоваться в маршрутизаторе **redirect**, устанавливаемом примерно так::

    data = ${lookup mysql{ALIAS_QUERY}}

В более ранних версиях Exim, макрос, иногда, использовался для списков доменов, хостов, или адресов. В Exim v4 они лучше обрабатываются именованными списками - смотрите раздел :ref:`10.5 <ch10_05>`.


.. _ch06_09:

------------------------------------------
Условные пропуски в конфигурационном файле
------------------------------------------

Вы можете использовать директивы ``.ifdef``, ``.ifndef``, ``.elifdef``, ``.elifndef``, ``.else`` и ``.endif`` для динамического включения или исключения частей конфигурационного файла. Обработка происходит каждый раз, когда файл читается (т.е. когда запускается исполняемый файл Exim).

Реализация очень проста. Примеры четырёх первых директив должны сопровождаться текстом, включающим имена одного и более макросов. Условие проверяется, действительно ли происходила подстановка макроса в строке. Таким образом::

    .ifdef AAA
    message_size_limit = 50M
    .else
    message_size_limit = 100M
    .endif

устанавливает ограничение размера сообщения в 50mb, если задан макрос AAA, и 100MB в ином случае. Если задано более одного имени макроса в строке, условие истинно, если задано любое из них. Таким образом, это условие “or” (“или”). Чтобы получить условие “and”, вам необходимо использовать вложенное ``.ifdefs``.

Хотя вы можете использовать макрораскрытие для создания одной из этих директив, это не очень полезно, поскольку условие “в этой строке была макроподстановка” (“there was a macro substitution in this line”) будет всегда истинным.

Текст следующий за ``.else`` и ``.endif`` игнорируется, и может использоваться как комментарий, чтобы сделать пояснения к сложным вложениям.


.. _ch06_10:

--------------------------
Общий синтаксис параметров
--------------------------

Для основного набора параметров, параметров драйвера и параметра ``local_scan()``, каждая настройка находится на отдельной строке, и начинается с имени, состоящего из символов в нижнем регистре, и символов подчёркивания. Многие параметры требуют значение с данными, и в этом случае, имя должно сопровождаться символом равно (“=”), с необязательными пробелами, и затем значение. Например::

    qualify_domain = mydomain.example.com

Некоторые параметры настройки могут содержать уязвимые данные, например, пароль для доступа к базам данных. Для недопущения прочтения этих значений неадминистративными пользователями, используя параметр командной строки **-bP**, вы можете предварять их словом “hide” (“скрыть”). Например::

    hide mysql_servers = localhost/users/admin/secret-password

Для неадминистративных пользователей, такие параметры отображаются как в примере::

    mysql_servers = <value not displayable>

Если “hide” используется в параметрах драйвера, оно скрывает значение этих параметров во всех проявлениях этого драйвера.

Следующие разделы описывают синтаксис используемый для различных типов данных, находящихся в параметрах настроек.


.. _ch06_11:

----------------
Булевы параметры
----------------

Параметры, тип которых даётся как булева переменная [#]_ -  переключатели on/off. Возможны два способа определить такие параметры: с и без значением данных. Если имя параметра указано само по себе, без данных, - это значит “on”; если ему предшествует “no\_” или “not\_” - это значит “off”. Однако, булевы параметры могут быть сопровождены символом равно “=”, и одним из слов “true”, “false”, “yes”, или “no”, как альтернативный синтаксис. Например, следующие два параметра настройки, будут иметь одинаковый эффект::

    queue_only
    queue_only = true

Следующие две строки, также, имеют одинаковый (обратный) эффект::

    no_queue_only
    queue_only = false

Вы можете использовать тот синтаксис, который предпочитаете.

.. _ch06_12:

----------------------
Целочисленные значения
----------------------

Если тип параметра дан как “целочисленное” (“integer”), значение может быть задано в десятичном, шестнадцатеричном, или восьмеричном представлении. Если оно начинается с цифры больше нуля, предполагается десятичное число. Иначе, оно обрабатывается как восьмеричное число, за исключением случая когда оно начинается с символов “0x”, тогда оно обрабатывается как шестнадцатеричное число.

Если целочисленное значение сопровождается символом “K”, оно умножается на 1024; если оно сопровождается символом “M”, оно умножается на 1024x1024. Когда выводятся значения целочисленных параметров, значения, являющиеся точным множителем 1024 или 1024x1024, иногда, но не всегда, печатаются с использованием символов “K” и “M”. Стиль печати независим от использовавшегося, фактического, входного формата.

.. _ch06_13:

-----------------------------------
Целочисленные восьмеричные значения
-----------------------------------

Если тип параметра дан как “восьмеричное целое число”, его значение всегда интерпретируется как восьмеричное число, вне зависимости - начинается оно с нуля или нет. Такие параметры всегда выводятся в восьмеричном виде.

.. _ch06_14:

----------------------------
Числа с фиксированной точкой
----------------------------

Если тип параметра дан как “fixed-point”, его значение должно быть десятичным числом, необязательно сопровождаемым десятичной точкой, вплоть до трёх цифр после неё.

.. _ch06_15:

-------------------
Временные интервалы
-------------------

Интервал времени указывается как последовательность чисел, каждое сопровождаемое буквой, без пробелов:

=====  ========
**s**  секунды 
**м**  минуты 
**h**  часы 
**d**  дни 
**w**  недели
=====  ========

Например, “3h50m” задаёт 3 часа и 50 минут. Значения временных интервалов выводятся в таком же формате. Exim не ограничивает значения; он допускает, например, указать “90m” вместо “1h30m”.

.. _ch06_16:

------------------
Строковые значения
------------------

Если тип параметра определён как “строка”, значение может быть определено с двойными кавычками, или без них. Если оно не начинается с двойной кавычки, оно берётся как состоящее из остатка строки, плюс любые строки продолжения, начинающиеся с первого символа после любых начальных пробелов, с удалением пробелов в конце, и без интерпретации символов в строке. Поскольку Exim удаляет строки комментариев (т.е. начинающиеся с “#”) на ранней стадии, они могут появляться в середине многостроковых строк. Поэтому следующие настройки эквивалентны::

    trusted_users = uucp:mail
    trusted_users = uucp:\
                    # This comment line is ignored
                    mail

Если строка начинается с символа двойной кавычки, она должна завершаться заключительной двойной кавычкой, и любые символы обратного слэша, кроме как используемые для продолжения строки, интерпретируются как специальные символы (escape-последовательность), следующим образом:

====================  ============
``\\``                одиночный обратный слэш 
``\n``                символ новой строки 
``\r``                символ возврата каретки 
``\t``                символ табуляции (TAB) 
``\<octal digits>``   до трёх восьмеричных цифр определяющих один символ 
``\x<hex digits>``    до двух шестнадцатеричных цифр определяющих один символ 
====================  ============

Если обратные слэш сопровождается какими-то другими символами, включая двойные кавычки, этот символ заменяет пару [#]_.

Квотирование [#]_ необходимо лишь если вы хотите использовать escape-последовательности для вставки специальных символов, или необходимо определить значение с начальными и конечными пробелами. Эти случаи редки, таким образом использование двойных кавычек почти не необходимо в текущих версиях Exim`a. В версиях Exim до 3.14, двойные кавычки требовались для продолжения строки, таким образом, вы можете натолкнуться на старые конфигурационные файлы, и примеры, в которых применяется излишнее использование двойных кавычек.

.. _ch06_17:

---------------
Раскрытие строк
---------------

Некоторые строки в конфигурационном файле подвергаются *раскрытию строки* (*string expansion*), при помощи которого различные части строки могут быть заменены, по обстановке (смотрите раздел :ref:`11 <ch11_00>`). Входной синтаксис для таких строк лишь описан; в частности, обработка обратных слэшей внутри квотированных [#]_ строк производится как часть входного процесса, до того как имеет место раскрытие. Однако, обратный слэш - также символ экранировки для раскрытия, таким образом, любые требуемые обратные слэши должны быть удвоены, если они в пределах конфигурационной строки в кавычках.


.. _ch06_18:

---------------------------
Имена пользователей и групп
---------------------------

Имена пользователей и групп задаются как строки, с использованием синтаксиса описанного выше, но строки интерпретируются специальным образом. Имя пользователя или группы должно состоять полностью из цифр, или именем, которое может быть найдено функциями ``getpwnam()`` или ``getgrnam()`` соответственно.


.. _ch06_19:

------------------
Построение списков
------------------

Данные для некоторых конфигурационных параметров - список элементов, с двоеточием в качестве разделителя по умолчанию. Многие из этих параметров оказываются типом “список строк” (“string list”) в описаниях, позже, в этом документе.Другие перечислены как “domain list”, “host list”, “address list”, или “local part list”. Синтаксически, они все одинаковы; однако, все, кроме “string list”, являются объектами для интерпретации, как описано в :ref:`разделе 10 <ch10_00>`.

Во всех случаях, весь список обрабатывается как единая длинная строка, как того требует синтаксис. Пример - установка параметра **trusted_users**, выше, в разделе :ref:`6.16 <ch06_16>`. Если реально необходимо использовать двоеточие как элемент в списке, оно должно быть введено как два двоеточия. Начальные и конечные пробелы, в каждом элементе списка, игнорируются. Это позволяет включать элементы начинающиеся с двоеточия, в частности, определённые формы адресов IPv6. Например, список::

    local_interfaces = 127.0.0.1 : ::::1

содержит два IP адреса, адрес IPv4 127.0.0.1 и адрес IPv6 ::1.

.. note:: Несмотря на то, что начальные и конечные пробелы игнорируются в списке индивидуальных элементов, они не игнорируются при парсинге списка. Пробел после первого двоеточия, в примере выше, необходим. Если бы его там не было, то список интерпретировался бы как два элемента 127.0.0.1:: и 1.


.. _ch06_20:

------------------------
Смена разделителя списка
------------------------

Удвоение двоеточий в адресах IPv6 - неприятная рутинная операция, таким образом был предоставлен механизм позволяющий изменить разделитель списка. Если список начинается с левой угловой скобки, сопровождаемой каким-либо символом пунктуации, этот символ используется, вместо двоеточия, как разделитель элементов списка. Для примера, список выше, может быть переписан с использованием точки с запятой в качестве разделителя::

    local_interfaces = <; 127.0.0.1 ; ::1

Это средство применяется ко всем спискам, за исключением списка в **log_file_path**. Рекомендуется, использовать иные символы, кроме двоеточия, было ограничено обстоятельствами, где они реально необходимы.

Также, возможно использовать символ новой строки и другие контрольные символы (те, чьи значения кода меньше 32, плюс DEL) как разделитель в списках. Такие разделители должны быть представлены буквально, во время обработки списка. Для параметров где строки раскрываются, вы можете записать разделитель используя обычную экранированную последовательность. Это будет обработано раскрытием до интерпретации строки как списка. Например, список доменов, разделённый символами новой строки, создаваемый поиском, вы можете обработать напрямую по строкам, как тут::

    domains = <\n ${lookup mysql{.....}}

Это позволяет уклониться от изменения разделителя списка в некоторых данных. Врятли вы захотите использовать управляющий символ как разделитель в параметрах которые не раскрываются, поскольку значение - буквальный текст. Однако, это может быть сделано путём задания значения в кавычках. Например::

    local_interfaces = "<\n 127.0.0.1 \n ::1"

В отличие от печатных символов разделителей, которые могут быть включены в список элементов путём удвоения, невозможно включить управляющие символы как данные. когда они заданы как разделитель. Два таких символа подряд интерпретируются как содержащие пустой элемент списка.

.. _ch06_21:

-------------------------
Пустые элементы в списках
-------------------------

Пустые элементы в конце списков всегда игнорируются. Другими словами, конечный символ разделителя игнорируется. Таким образом, список в::

    senders = user@domain :

содержит лишь один элемент. Если вы хотите включить пустую строку в качестве одного из элементов списка, она не должна быть последним элементом списка. Например, этот список содержит три элемента, второй из которых пустой::

    senders = user1@domain : : user2@domain

Должно быть пустое пространство, между этими двумя двоеточиями, иначе они будут интерпретированы как один символ двоеточия (и тогда список содержал бы лишь один элемент). Если вы хотите задать список, содержащий лишь один пустой элемент, вы можете сделать это, как в этом примере::

    senders = :

В этом случае, первый элемент пуст, и второй игнорируется, поскольку он в конце списка.


.. _ch06_22:

----------------------------
Формат конфигурации драйвера
----------------------------

Есть отдельные части в конфигурации, для определения маршрутизаторов, транспортов и аутентификаторов. В каждой части, вы определяете множество примеров драйверов, каждый с его собственным набором параметров. Каждый пример драйвера задаётся последовательностью строк, такого типа::

    <instance name>:
      <option>
      ...
      <option>

В следующем примере, имя образца - **localuser**, и он сопровождается тремя параметрами::

    localuser:
      driver = accept
      check_local_user
      transport = local_delivery


Для каждого образца драйвера, вы определяете, какой модуль кода Exim он использует - путём установки параметра **driver**, и, необязательно, некоторые параметры конфигурации. Например, в случае транспортов, если вы хотите чтобы транспорт доставлял по SMTP, вы бы использовали драйвер **smtp**; если вы хотите доставлять в локальный файл, вы бы использовали драйвер **appendfile**. Каждый из драйверов подробно описан в его собственной главе, позже, в этом руководстве.

Вы можете иметь несколько маршрутизаторов, транспортов или аутентификаторов которые основаны на одном и том же основном драйвере (каждый должен иметь своё имя).

Порядок, в котором определены маршрутизаторы, важен, потому что адреса передаются на индивидуальные маршрутизаторы по одному, по порядку. Порядок в котором заданы транспорты, не имеет значения. Порядок в котором определены аутентификаторы, используется только когда Exim, как клиент, ищет их, чтобы найти тот, который соответствует предлагаемому сервером механизму аутентификации.

В пределах определения образца драйвера, есть два вида параметров: *универсальный* (*generic*) и *частный* (*private*). Общие параметры - те, которые применяются ко всем драйверам,  одного типа (т.е. все маршрутизаторы, все транспорты, или все аутентификаторы). Параметр **driver** - общий параметр, который должен появляться в каждом определении. Частные параметры являются специальными для каждого драйвера, и ни один не должен появляться, поскольку все они имеют значения по умолчанию.

Параметры могут появляться в любом порядке, за исключением параметра **driver** который должен предшествовать частным параметра, поскольку они зависимы от него. Поэтому, рекомендуется, чтобы параметр **driver** всегда была первой.
                              
Имена экземпляров драйверов, которые используются для ссылок в логах, и других местах, могут быть любой последовательностью букв, цифр, и подчёркиваний (начинающихся с буквы), и должны быть уникальными среди драйверов того же типа. Маршрутизатор и транспорт (для примера), могут иметь одинаковое имя, но никакие два маршрутизатора не могут быть с одним именем. Имя экземпляра драйвера не должно быть перепутано с именем базового модуля драйвера. Например, конфигурационные строки::

    remote_smtp:
      driver = smtp

создают экземпляр драйвера транспорта **smtp**, имя которого **remote_smtp**. Тот же самый код драйвера может использоваться более одного раза, с различными именами экземпляров и различными параметрами настроек, в каждом случае. Второй экземпляр транспорта **smtp**, с другими параметрами, может быть задан таким образом::

    special_smtp:
      driver = smtp
      port = 1234
      command_timeout = 10s


Имена **remote_smtp** и **special_smtp** использовались бы для ссылки на эти экземпляры транспорта из маршрутизаторов, и эти имена фигурировали бы в строках логов.

Строки комментариев могут присутствовать в середине спецификации драйвера. Полный список параметров настройки для любого частного драйвера, включая все значения по умолчанию, может быть создан, используя параметр командной строки **-bP**.

.. [#] т.е. существующий файл не будет перезаписан - прим. lissyara 
.. [#] (?) 
.. [#] логическая переменная - прим. lissyara
.. [#] пару обратный слэш и символ - прим. lissyara.
.. [#] помещение в двойные кавычки - прим. lissyara.
.. [#] находящихся внутри двойных кавычек - прим. lissyara
