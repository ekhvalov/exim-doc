
.. _ch29_00:

Транспорт **pipe**
==================

Транспорт **pipe** использует доставку через трубу (pipe) к команде, выполняющейся в ином процессе. Один пример - использование **pipe** как псевдоудалённого транспорта для передачи сообщений какому-то иному механизму доставки (типа UUCP). Другой - использование отдельными пользователями для автоматической обработки их входящих сообщений. Транспорт **pipe** может использоваться одним из следующих способов:

* Маршрутизатор направляет один адрес на транспорт обычным способом, транспорт сконфигурен как транспорт **pipe**. В этом случае, $local_part содержит локальную часть адреса (как обычно), и запускаемая команда задана в транспорте, параметром **command**.

* Если параметр **batch_max** установлена более чем в 1 (значение по умолчанию - 1), транспорт может обработать более одного адреса за один запуск. В этом случае, когда к транспорту маршрутизируется более одного адреса, $local_part не установлена (поскольку она не уникальна). Однако, псевдопеременная $pipe_addresses (описанная в разделе :ref:`29.3 <ch29_03>`) содержит все адреса которые маршрутизируются к транспорту.

* Маршрутизатор переадресует адрес напрямую к команде pipe (например, из файла синонимов и перенаправлений). В этом случае, $address_pipe содержит текст команды pipe, и параметр **command** в маршрутизаторе - игнорируется. Если транспортируется лишь один адрес (**batch_max** более одного, или лишь один адрес был передресован к команде трубы), $local_part содержит переадресованную локальную часть.

Транспорт **pipe** - неинтерактивный метод доставки. Также, Exim может доставлять сообщения через трубы, используя интерактивный протокол LMTP. Это осуществляется транспортом **lmtp**.

В случае, когда **pipe** работает как следствие совпадения в локальном пользовательском файле *.forward*, команда запускается под uid и gid этого пользователя. В других случаях, uid и gid должны быть заданы явно, или в транспорте, или в маршрутизаторе обрабатывающем адрес. Текущая и “домашняя” директории также управляемы. Для получения дополнительных деталей о окружении детальной доставки, смотрите главу :ref:`23 <ch23_00>` и главу :ref:`25 <ch25_00>` для обсуждения пакетной локальной доставки.

.. _ch29_01:

Конкурирующие доставки
----------------------

Если два сообщения приходят почти одновременно, и оба маршрутизируются на доставку pipe, два транспорта **pipe** могут быть запущены одновременно. Вы должны гарантировать, что любые команды pipe, установленные вами, являются корректными для этого случая. Если команда пишет в файл, может быть полезна утилита *exim_lock*.

.. _ch29_02:

Возвращаемый статус и данные
----------------------------

Если команда выходит со статусом отличным от нуля, доставка считается неудачной, если не установлен параметр **ignore_status** (в этом случае код возврата обрабатывается как ноль), или возвращаемый код - один из перечисленных в параметре **temp_errors**, которые интерпретируются со смыслом “попробуйте позднее” (“try again later”). В этом случае, доставка задерживается. Детали постоянной ошибки записываются в лог, но не включаются в рикошет, который просто содержит “local delivery failed”.

Если код возврата более чем 128, и выполняемая команда - shell-скрипт, это, обычно, означает, что скрипт был уничтожен сигналом, чьё значение равно - код возврата минус 128.

Если Exim не может запустить команду (т.е. - если *execve()* неудачна), код возврата устанавливается равным 127. Это - значение, возвращаемое shell`ом, если запрашивают о запуске невыполняемой команды. Формулировка для логов наводит на мысль, что проблемой может быть несуществующая команда.

Параметр **return_output** может затрагивать результат доставки. Если он установлен, предполагается, что любой вывод от команды в стандартный поток вывода или ошибок является признаком ошибки команды, даже если она вернула нулевой код возврата, или установлен параметре **ignore_status**. Вывод команды включается как часть сообщения рикошета. Параметр **return_fail_output** подобна вышеописанной, за исключением что вывод возвращается лишь когда команда выходит с ошибочным кодом возврата, т.е. значениями кроме нуля или совпадающим с **temp_errors**.

.. _ch29_03:

Как выполняется команда
-----------------------

Командная строка (по умолчанию) разбирается в имя команды и аргументы непосредственно транспортом **pipe**. Параметры **allow_commands** и **restrict_to_path** могут использоваться для ограничения команд, которые могут быть запущены.

Элементы не помещённые в кавычки разделяются пробелами. Если аргумент помещён в двойные кавычки, обратный слэш интерпретируется как обычно, - как специальный символ. Если аргумент фигурирует в одинарных кавычках, интерпретации специальных символов не производится [#]_.

К командной строке применяется раскрытие строки, кроме случаев когда она приходит из традиционного файла *.forward* (команды из файла фильтра раскрываются). Раскрытие применяется по очереди, к каждому аргументу, а не ко всей строке. Поэтому, любой любой элемент раскрытия, содержащий пробелы, должен быть помещён в кавычки таким образом, чтобы он был внутри одного аргумента. Установка типа

::
    
    command = /some/path ${if eq{$local_part}{postmaster}{xx}{yy}}
   
работать не будет, поскольку элемент раскрытия разбивается на несколько аргументов. Вы должны написать

::
  
    command = /some/path "${if eq{$local_part}{postmaster}{xx}{yy}}"
    
чтобы гарантировать, что всё это будет в одном аргументе. Раскрытие производится этим способом, аргумент за аргументом, таким образом, число аргументов не может быть изменено в результате раскрытия, и кавычки или обратные слэши во вставленных параметрах не взаимодействуют с внешними кавычками. Однако, это приводит к проблемам - если вы хотите создавать много параметров (или имя команды, плюс аргументы) из одного раскрытия. В этой ситуации, самое простое решение - использовать shell. Например::

    command = /bin/sh -c ${lookup{$local_part}lsearch{/some/file}}

Имеет место специальная обработка, когда аргумент состоит в точности из текста $pipe_addresses. Это - не общая переменая раскрытия; единственное место, где распознаётся эта строка - когда она появляется как параметр для трубы, или команды транспортного фильтра. Она вызывает каждый обрабатываемый адрес для вставки в список аргументов, в этой точке, как отдельный параметр. Это позволяет избежать любых проблем с пробелами или метасимволами shell, и используется когда транспорт **pipe** обрабатывает группу адресов в пакете.

После разделения на параметры и раскрытие, результирующая команда запускается в субпроцессе напрямую от транспорта, не под shell`ом. Доставляемое сообщение предоставляется на стандартном вводе, и оба - стандартный вывод, и стандартный вывод для ошибок, связаны с одной трубой, читаемой Exim'ом. Параметр **max_output** - контролирует, как много вывода может произвести команда, и параметра **return_output** и **return_fail_output** - управляют, что с ним делается.

Невыполнение команды под shell`ом (по умолчанию), уменьшает риск безопасности в случаях, когда команда из пользовательского фильтра строится из данных взятых из входящего сообщения. Если shell требуется, он, разумеется, может быть явно определён как команда, которая выполнится. Однако, существуют обстоятельства, когда существующие команды (например, в файлах *.forward*) ожидают своего выполнения под shell`ом,и не могут быть легко модифицированы. Для разрешениия этих случаев, есть параметр, называемый **use_shell**, которая изменяет способ работы транспорта **pipe**. Вместо описанной разбивки командной строки, она раскрывает её как одну строку, и передаёт результат */bin/sh*. Параметр **restrict_to_path** и средство $pipe_addresses не могут использоваться с **use_shell**, а сам механизм - менее безопасен.

.. _ch29_04:

Переменные окружения
--------------------

Перечисленные ниже переменные окружения устанавливаются при вызове команды. Список - компромисс, для максимальной совместимости с другими MTA. Отметтьте, что для добавления дополнительных переменных окружения может использоваться параметр **environment**.

=================  ===============
DOMAIN             домен адреса
HOME               домашняя директория; если задана
HOST               имя хоста при вызове из маршрутизатора (смотрите ниже)
LOCAL_PART         смотрите ниже
LOCAL_PART_PREFIX  смотрите ниже
LOCAL_PART_SUFFIX  смотрите ниже
LOGNAME            смотрите ниже
MESSAGE_ID         локальный идентификатор сообщения Exim`a
PATH               как задано путём параметра **path**
QUALIFY_DOMAIN     квалификационный домен отправителя
RECIPIENT          полный адрес получателя
SENDER             отправитель сообщения (пустой - если рикошет)
SHELL              /bin/sh
TZ                 значение параметра **timezone**; если установлен
USER               смотрите ниже
=================  ===============

Когда транспорт **pipe** вызывается непосредственно из (например) маршрутизатора **accept**, LOCAL_PART устанавливается в локальную часть адреса. Когда он вызывается как результат раскрытия перенаправления или синонима, LOCAL_PART устанавливается в локальную часть адреса, который был раскрыт. В обоих случаях, любые аффиксы удаляются из локальной части, и становятся доступны в LOCAL_PART_PREFIX и LOCAL_PART_SUFFIX, соответственно. LOGNAME и USER устанавливаются в тоже значение, что и LOCAL_PART, для совместимости с другими MTA.

HOST - устанавливается лишь когда транспорт **pipe** вызывается из маршрутизатора, который ассоциирует хосты с адресами, обычно, когда **pipe** используется как псевдоудалённый транспорт. В качестве значения HOST используется первое имя хоста переданное маршрутизатором.

Если установлен общий транспортный параметр **home_directory**, его значение используется для переменной окружения HOME.  Иначе, домашняя директория может быть установлена маршрутизатором, путём параметра **transport_home_directory**, с домашним каталогом пользователя в качестве значения по умолчанию, если задан параметр **check_local_user**.

.. _ch29_05:

Частные параметры для **pipe**
------------------------------

.. index::
   pair: pipe; allow_commands 

==================  =========  ==================  ==============
**allow_commands**  Use: pipe  Type: string list†  Default: unset
==================  =========  ==================  ==============

Строка раскрывается, и, затем, интерпретируется как раздёлённый двоеточиями список допустимых команд. Если **restrict_to_path** не установлена, разрешены лишь команды перечисленные в списке **allow_commands**. Они не должны быть абсолютными путями; параметр **path** продолжает использоваться для относительных путей. Если **restrict_to_path** установлена с **allow_commands**, команда должна быть в списке **allow_commands**, или именем без каких-либо слэшей найденных в путях. Другими словами, если не установлена ни **allow_commands**, ни **restrict_to_path** - нет никаких ограничений на команды, но иначе, разрешены лишь команды допускаемые тем или иным параметром. Например, если

::

    allow_commands = /usr/bin/vacation

и **restrict_to_path** не установлена, разрешена лишь команда */usr/bin/vacation*. Параметр **allow_commands** не может быть установлена, если установлена **use_shell**.

.. index::
   pair: pipe; batch_id 

============  =========  =============  ==============
**batch_id**  Use: pipe  Type: string†  Default: unset
============  =========  =============  ==============

Смотрите описание пакетной локальной доставки в главе :ref:`25 <ch25_00>`.

.. index::
   pair: pipe; batch_max

=============  =========  =============  ==========
**batch_max**  Use: pipe  Type: integer  Default: 1
=============  =========  =============  ==========

Этот параметр ограничивает число адресов, которые могут быть обработаны в одной доставке. Смотрите описание пакетной локальной доставки в главе :ref:`25 <ch25_00>`.

.. index::
   pair: pipe; check_string

================  =========  ============  ==============
**check_string**  Use: pipe  Type: string  Default: unset
================  =========  ============  ==============

Когда **pipe** пишет сообщение, начало каждой строки проверяется на совпадение с **check_string**, и если оно происходит, начальные совпавшие символы заменяются содержимым **escape_string**, если обе установлены. Значение **check_string** - литеральная строка, а не регулярное выражение, и регистр букв имеет значение. Когда установлена **use_bsmtp**, содержимое **check_string** и **escape_string** приводится к значениям, которые оформлены протоколом экранирования SMTP [#]_. Любые настройки сделанные в конфигурационном файле - игнорируются.

.. index::
   pair: pipe; command

===========  =========  =============  ==============
**command**  Use: pipe  Type: string†  Default: unset
===========  =========  =============  ==============

Этот параметр не должен быть установлен, когда **pipe** используется для доставки в трубы, полученные непосредственно от переназначения адресов. В других случаях, параметр должен быть установлен, для предоставления команды, которая будет выполнена. Он не нуждается в абсолютном пути (смотрите ниже, параметр **path**). Команда разделяется Exim`ом на отдельные параметры, и каждый аргумент отдельно раскрывается, как описано выше, в разделе :ref:`29.3 <ch29_03>`.

.. index::
   pair: pipe; environment

===============  =========  =============  ==============
**environment**  Use: pipe  Type: string†  Default: unset
===============  =========  =============  ==============

Этот параметр используется для добавления дополнительный переменных к среде окружения, в которой выполняется команда (смотрите раздел :ref:`29.4 <ch29_04>`, для получения списка значений по умолчанию). Ее значение - строка, которая вначале раскрывается, и затем интерпретируется, как список, разделённый двоеточиями, установок среды окружения в форме *<name>=<value>*.

.. index::
   pair: pipe; escape_string

=================  =========  ============  ==============
**escape_string**  Use: pipe  Type: string  Default: unset
=================  =========  ============  ==============

Смотрите выше параметр **check_string**.

.. index::
   pair: pipe; freeze_exec_fail

====================  =========  =============  ==============
**freeze_exec_fail**  Use: pipe  Type: boolean  Default: false
====================  =========  =============  ==============

Ошибка выполнения команды в транспорте **pipe**, по умолчанию, обрабатывается как любая другая ошибка при запуске команды. Однако, если установлен параметр **freeze_exec_fail**, ошибка выполнения обрабатывается особым образом, и вызывает заморозку сообщения вне зависимости от установки **ignore_status**.

.. index::
   pair: pipe; ignore_status

=================  =========  =============  ==============
**ignore_status**  Use: pipe  Type: boolean  Default: false
=================  =========  =============  ==============

Если этот параметр истинна, статус возвращаемый субпроцессом запустившим команду - игнорируется, и Exim ведёт себя так, как будто был возвращён ноль. Иначе, ненулевой статус или завершение по сигналу вызывают ошибку транспорта, если статус - не одно из значений перечисленных в **temp_errors**; они вызывают задержку доставки и дальнейшие, более поздние попытки доставки.

.. note:: Этот параметр не касается таймаутов, которые не возвращают статус. Смотрите параметр **timeout_defer**, для информации о обработке таймаутов.
   
.. index::
   pair: pipe; log_defer_output

====================  =========  =============  ==============
**log_defer_output**  Use: pipe  Type: boolean  Default: false
====================  =========  =============  ==============

Если этот параметр установлен, и статус возвращаемый командой - один из кодов перечисленных в **temp_errors** (т.е. доставка была задержана), и ею был создан какой-либо вывод, его первая строка записывается в главный лог.

.. index::
   pair: pipe; log_fail_output

===================  =========  =============  ==============
**log_fail_output**  Use: pipe  Type: boolean  Default: false
===================  =========  =============  ==============

Если этот параметр установлен, и команда возвращает какой-либо вывод, и, также, завершается с кодом возврата не равным ни нулю, ни кодам перечисленным в **temp_errors** (т.е. - доставка неудачна), первая строка вывода записывается в главный лог. Этот параметр, и **log_output** - взаимоисключающие. Лишь одна из них может быть установлена.

.. index::
   pair: pipe; log_output

==============  =========  =============  ==============
**log_output**  Use: pipe  Type: boolean  Default: false
==============  =========  =============  ==============

Если этот параметр установлен, и команда возвращает какой-либо вывод, первая строка вывода записывается в главный лог вне зависимости от возвращённого кода. Этот параметр и **log_fail_output** - взаимоисключающие. Лишь один из них может быть установлен.

.. index::
   pair: pipe; max_output

==============  =========  =============  ============
**max_output**  Use: pipe  Type: integer  Default: 20K
==============  =========  =============  ============

Этот параметр определяет максимальное количество вывода, который команда может создать на своём стандартном выводе и стандартном файле ошибок в совокупности. Если лимит исчерпан, процесс, выполняющий команду, уничтожается. Это - мера безопасности, для поимки неудержимо растущих процессов. Ограничение применяется независимо от настроек параметров контролирующих что происходит с этим выводом (например, **return_output**). Из-за эффекта буферизации, объём вывода может немного превысить ограничение, до того, как Exim это заметит.

.. index::
   pair: pipe; message_prefix

==================  =========  =============  ==================
**message_prefix**  Use: pipe  Type: string†  Default: see below
==================  =========  =============  ==================

Заданная строка раскрывается, и выводится в начале каждого сообщения. По умолчанию, она не задана, если установлен параметр **use_bsmtp**. Иначе, она

::

    message_prefix = \
      From ${if def:return_path{$return_path}{MAILER-DAEMON}}\
           ${tod_bsdinbox}\n

Обычно, это требуется для программы */usr/bin/vacation*. Однако, она не должна присутствовать, если производится доставка на Cyrus IMAP server, или локальному агенту доставки “tmail”. Префикс может быть запрещён путём установки

::

    message_prefix =
    
    
.. note:: Если вы устанавливаете параметр **use_crlf** вы должны изменить все “\n” на “\r\n” в параметре **message_prefix**.

.. index::
   pair: pipe; message_suffix

==================  =========  =============  ==================
**message_suffix**  Use: pipe  Type: string†  Default: see below
==================  =========  =============  ==================

Заданная строка раскрывается, и выводится в начале каждого сообщения. По умолчанию, она не задана, если установлен параметр **use_bsmtp**. Иначе, он - одна новая строка. Суффикс может быть запрещён путём установки

::

    message_suffix =
   
.. note:: Если вы устанавливаете параметр **use_crlf** вы должны изменить все “\n” на “\r\n” в параметре **message_suffix**.

.. index::
   pair: pipe; path

========  =========  ============  ==================
**path**  Use: pipe  Type: string  Default: see below
========  =========  ============  ==================

Этот параметр определяет строку, которая устанавливается в переменную окружения PATH, субпроцесса. Значение по умолчанию::

    /bin:/usr/bin
   
Если параметр **command** не приводит к абсолютному имени пути, команда разыскивается в директориях PATH обычным способом. 

..warning:: Это не применяется к команде, заданной как транспортный фильтр.

.. index::
   pair: pipe; permit_coredump

===================  =========  =============  ==============
**permit_coredump**  Use: pipe  Type: boolean  Default: false
===================  =========  =============  ==============

Normally Exim inhibits core-dumps during delivery. If you have a need to get a core-dump of a pipe command, enable this command. This enables core-dumps during delivery and affects both the Exim binary and the pipe command run. It is recommended that this option remain off unless and until you have a need for it and that this only be enabled when needed, as the risk of excessive resource consumption can be quite high. Note also that Exim is typically installed as a setuid binary and most operating systems will inhibit coredumps of these by default, so further OS-specific action may be required.

.. index::
   pair: pipe; pipe_as_creator

===================  =========  =============  ==============
**pipe_as_creator**  Use: pipe  Type: boolean  Default: false
===================  =========  =============  ==============

Если не задан общий параметр **user**, и этот параметр истинна, процесс доставки запускается под uid, который был у Exim при при изначальном вызове для приёма сообщения. Если не установлен идентификатор группы (через общий параметр **group**), в силе gid, который был у Exim при при изначальном вызове для приёма сообщения.

.. index::
   pair: pipe; restrict_to_path

====================  =========  =============  ==============
**restrict_to_path**  Use: pipe  Type: boolean  Default: false
====================  =========  =============  ==============

Когда этот параметр установлен, любое имя команды не перечисленное в **allow_commands** не должно содержать каких-бы то ни было слэшей. Команда ищется лишь в директориях перечисленных в параметре **path**. Этот параметр предназначен для случая, когда команда трубы была создана из пользовательского файла *.forward*. Обычно, это обрабатывается транспортом **pipe**, называемым **address_pipe**.

.. index::
   pair: pipe; return_fail_output

======================  =========  =============  ==============
**return_fail_output**  Use: pipe  Type: boolean  Default: false
======================  =========  =============  ==============

Если этот параметр установлен в истину, и команда производит какой-либо вывод, и завершается с кодом возврата не равным нулю или не содержащимся в кодах перечисленных в **temp_errors** (т.е. ошибка доставки), вывод возвращается в рикошете. Однако, если сообщение имеет пустого отправителя (т.е. оно само по себе рикошет), вывод команды отбрасывается. Этот параметр и **return_output** - взаимоисключающие. Лишь один из них может быть установлен.

.. index::
   pair: pipe; return_output

=================  =========  =============  ==============
**return_output**  Use: pipe  Type: boolean  Default: false
=================  =========  =============  ==============

Если этот параметр установлен в истину, и команда производит какой-либо вывод, доставка считается неудачной вне зависимости от кода возврата, и вывод возвращается в рикошете. Иначе, вывод просто игнорируется. Однако, если сообщение имеет пустого отправителя (т.е. оно само по себе рикошет), вывод всегда команды отбрасывается, вне зависимости от установки этого параметра. Этот параметр и **return_fail_output** - взаимоисключающие. Лишь один из них может быть установлен.

.. index::
   pair: pipe; temp_errors

===============  =========  =================  ==================
**temp_errors**  Use: pipe  Type: string list  Default: see below
===============  =========  =================  ==================

Этот параметр содержит или список, разделённый двоеточиями, или единственную звёздочку. Если параметр **ignore_status** - ложь, и **return_output** - не задан, и команда выходит с ненулевым кодом, ошибка обрабатывается как временная, и доставка задерживается - если код возврата совпадает с одним из чисел, или если стоит звёздочка. Иначе, ненулевые коды возврата обрабатываются как постоянные ошибки. Значение по умолчанию содержит коды заданные EX_TEMPFAIL и EX_CANTCREAT в “sysexits.h”. Если Exim собран на системе не задающей эти макросы, они принимают значения 75 и 73, соответственно.

.. index::
   pair: pipe; timeout

===========  =========  ==========  ===========
**timeout**  Use: pipe  Type: time  Default: 1h
===========  =========  ==========  ===========

Если команда не смогла завершится в течение этого времени, она уничтожена. Обычно, это вызывает ошибку доставки (но, посмотрите параметр **timeout_defer**). Нулевой интервал времени задаёт, что нет таймаута. Для гарантии, что любые созданные командой субпроцессы также уничтожены, Exim делает начальный процесс лидером группы процессов, и по таймауту всю группу процессов. Однако, это может быть обойдено, если один из процессов начинает новую группу процессов.

.. index::
   pair: pipe; timeout_defer

=================  =========  =============  ==============
**timeout_defer**  Use: pipe  Type: boolean  Default: false
=================  =========  =============  ==============

Таймаут в транспорте **pipe**, или в команде, запускаемой транспортом, или в ассоциированном с ним транспортном фильтре, по умолчанию обрабатывается как жёсткая ошибка, и доставка неудачна. Однако, если **timeout_defer** установлена в истину, оба вида таймаута становятся временными, вызывая задержку доставки.

.. index::
   pair: pipe; umask

=========  =========  ===================  ============
**umask**  Use: pipe  Type: octal integer  Default: 022
=========  =========  ===================  ============

Этот параметр определяет установку umask для субпроцесса выполняющего команду.

.. index::
   pair: pipe; use_bsmtp

=============  =========  =============  ==============
**use_bsmtp**  Use: pipe  Type: boolean  Default: false
=============  =========  =============  ==============

Если этот параметр установлен в истину, транспорт **pipe** пишет сообщения в формате “пакетного SMTP”, с отправителем конверта и получателем (получателями) включенными как SMTP-команды. Если вы хотите включить начальную команду HELO с каждым сообщением, вы можете сделать это, путём установки параметра **message_prefix**. Для получения дополнительных деталей о пакетном SMTP, смотрите раздел :ref:`45.10 <ch45_10>`.

.. index::
   pair: pipe; use_classresources

======================  =========  =============  ==============
**use_classresources**  Use: pipe  Type: boolean  Default: false
======================  =========  =============  ==============

Этот параметр доступен лишь в случае, если Exim работает на FreeBSD, NetBSD, или BSD/OS [#]_. Если она установлена в истину, функция *setclassresources()* используется для установки ограничений ресурсов, когда транспорт **pipe** производит доставку. Лимиты для uid, под которым работает труба, получаются из БД классов логинов [#]_.

.. index::
   pair: pipe; use_crlf

============  =========  =============  ==============
**use_crlf**  Use: pipe  Type: boolean  Default: false
============  =========  =============  ==============

Этот параметр заставляет завершаться строки двухсимвольной CR LF последовательностью (возврат каретки, новая строка), вместо одного символа перевода строки. В случае пакетного SMTP, записанная в трубу последовательность байтов - точное подобие того, что было бы послано в реальном SMTP-подключении.

Содержимое параметра **message_prefix** и **message_suffix** пишется дословно, таким образом, они должны содержать свои символы возврата каретки, если они им необходимы. Когда не задан параметр **use_bsmtp**, значение по умолчанию для обоих - **message_prefix** и **message_suffix** оканчивается одним переводом строки, таким образом, их значения должны быть изменены, чтобы они завершались “\r\n”, если задан параметр **use_crlf**.

.. index::
   pair: pipe; use_shell

=============  =========  =============  ==============
**use_shell**  Use: pipe  Type: boolean  Default: false
=============  =========  =============  ==============

Если этот параметр задан, команда передаётся */bin/sh* вместо непосредственного выполнения в транспорте, как описано в разделе :ref:`29.3 <ch29_03>`. Это менее безопасно, но требуется в некоторых ситуациях, где ожидается, что команда будет выполняться шелом и она не может быть легко изменена. Параметр **allow_commands**, **restrict_to_path**, средство $pipe_address не совместимы с **use_shell**. Команда расширяется как одиночная строка, и обрабатывается */bin/sh* как аргумент параметра **-с**.

.. _ch29_06:

Использование внешнего (стороннего) агента локальной доставки
-------------------------------------------------------------

Транспорт **pipe** может использоваться для передачи всех сообщений, которым требуется локальная доставка, отдельному локальному агенту доставки, типа **procmail**. Когда это делается, нужно быть осторожным, чтобы гарантировать, что труба выполняется под соответствующими uid и gid. В некоторых конфигурациях, требуется, чтобы это был uid, которому доверяет агент доставки, для предоставления корректного отправителя сообщения. Может потребоваться повторно пересобрать или перенастроить агента доставки таким образом, чтобы он доверял соответствующему пользователю. Далее - пример конфигурации транспорта и маршрутизатора, для **procmail**::

    # transport
    procmail_pipe:
      driver = pipe
      command = /usr/local/bin/procmail -d $local_part
      return_path_add
      delivery_date_add
      envelope_to_add
      check_string = "From "
      escape_string = ">From "
      user = $local_part
      group = mail

    # router
    procmail:
      driver = accept
      check_local_user
      transport = procmail_pipe

В этом примере, труба запускается как локальный пользователь, но с установленной группой *mail*. Как альтернатива - запускать трубу под определённым пользователем, типа *mail* или *exim*, но в этом случае вы должны принять меры, чтобы *procmail* доверял этому пользователю для предоставления корректного адреса отправителя. Если вы не задаёте или параметр **group** или параметр **user**, команда трубы запускается под локальным пользователем. Домашняя директория по умолчанию - домашний каталог пользователя.


.. note:: Команда, которая запускает транспорт **pipe**, не начинается с

  ::
    
      IFS=" "
      
  как показано в некоторой документации на *procmail*, поскольку Exim, по умолчанию, не использует shell для запуска команд канала.

Следующий пример показывает транспорт и маршрутизатор для систем, где локальные доставки обрабатываются Cyrus IMAP server.

::
  
    # transport
    local_delivery_cyrus:
      driver = pipe
      
      command = /usr/cyrus/bin/deliver \
        -m ${substr_1:$local_part_suffix} -- $local_part
      user = cyrus
      group = mail
      return_output
      log_output
      message_prefix =
      message_suffix =

      
    # router
    local_user_cyrus:
      driver = accept
      check_local_user
      local_part_suffix = .*
      transport = local_delivery_cyrus
      
.. note:: Не заданы **message_prefix** и **message_suffix**, и использование **return_output**, для того, чтобы любой текст, записанный Cyrus`ом, был возвращён отправителю.
                                                                     
.. [#] имеются ввиду символы начинающиеся с обратного слэша - прим. lissyara
.. [#] ? - невкурил... - прим. lissyara
.. [#] FreeBSD - форева; - извините, прим. lissyara :)
.. [#] /etc/login.conf - прим. lissyara
