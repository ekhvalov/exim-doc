
.. _ch15_00:

Общие параметры для маршрутизаторов
===================================

Эта глава описывает общие параметры, применяемые ко всем маршрутизаторам.  Те, которые являются предварительными условиями, помечены символом “‡”, в поле “использование”.

Для общего описания, как работает маршрутизатор, смотрите раздел :ref:`3.10 <ch03_10>` и :ref:`3.12 <ch03_12>`. Последний, определяет порядок в котором проверяются предварительные условия. Порядок раскрытия параметров, которые предоставляют данные для транспортов, таков: **errors_to**, **headers_add**, **headers_remove**, **transport**.

.. index::
   pair: routers; address_data 

================  ============  =============  ==============
**address_data**  Use: routers  Type: string†  Default: unset
================  ============  =============  ==============

Строка раскрывается лишь до запуска маршрутизатора, т.е. после успешного прохождения всех тестов предварительных условий. Если раскрытие принудительно неудачно, маршрутизатор отклоняется, значение **address_data** остаётся неизменённым, и параметр  **more** контролирует, что происходит дальше. Другие ошибки раскрытия вызывают задержку доставки адреса.

Когда раскрытие успешно, значение сохраняется вместе с адресом, и может быть доступно использованием переменной $address_data в текушем маршрутизаторе,последующих маршрутизаторах, и возможном окончательном транспорте.

.. warning:: Если текущий, или последующий маршрутизатор - маршрутизатор **redirect**, выполняющий файл фильтра пользователя, содержимое $address_data доступно в фильтре. Обычно, это не проблема, поскольку обычно, эти данные не конфиденциальны, или они принадлежат текущему пользователю, но если вы помещаете конфиденциальные данные в $address_data, вы должны помнить о этом пункте.

Даже если маршрутизатор отклоняется или принимается, значение $address_data остаётся с адресом, хотя оно может быть изменено, путём установки иной $address_data в последующем маршрутизаторе. Если маршрутизатор создает дочерние адреса, значение $address_data размножается на них. Также это применяется к специальному виду “детей”, которые создается маршрутизаторами с параметром **unseen**.

Идея **address_data** в том, что вы можете использовать её для поиска большого количества данных за раз, и позднее выбирать части данных. Для примера, вы можете использовать один поиск в LDAP, для возврата строки формы

::

    uid=1234 gid=5678 mailbox=/mail/xyz forward=/home/xyz/.forward

В транспорте, вы могли бы выбрать почтовый ящик установкой типа

::

    file = ${extract{mailbox}{$address_data}}

Это делает конфигурационный файл менее грязным, и также уменьшает число поисков (хотя Exim кэширует поиски).

Средство **address_data** также полезно как средство передачи информации от одного маршрутизатора к другому, и от маршрутизатора к транспорту. В дополнение, если **address_data** установлен маршрутизатор при проверке адреса получателя из ACL, она остаётся доступной для использования в остальной части утверждения ACL. После проверки отправителя, значение передаётся в $sender_address_data.

.. index::
   pair: routers; address_test

================  =============  =============  ==============
**address_test**  Use: routers‡  Type: boolean  Default: true
================  =============  =============  ==============

Если этот параметр установлен в ложь, маршрутизатор пропускается, когда маршрутизация тестируется при помощи параметра командной строки **-bt**. Это может быть удобным, когда ваш первый маршрутизатор посылает сообщения на внешний сканер, поскольку он сохраняет необходимость установки индикатора “already scanned”, при тестировании реальной маршрутизации адреса

.. index::
   pair: routers; cannot_route_message

========================  ============  =============  ==============
**cannot_route_message**  Use: routers  Type: string†  Default: unset
========================  ============  =============  ==============

Этот параметр определяет текстовое сообщение, используемое когда адрес не может быть смаршрутизирован, поскольку Exim исчерпал все маршруты. Сообщение по умолчанию - “Unrouteable address”. Этот параметр полезен лишь в маршрутизаторах, где параметр **more** установлен в ложь, или последнем маршрутизаторе конфигурации, поскольку используемое значение берётся из последнего просматриваемого маршрутизатора. Она включает маршрутизаторы, которые были пропущены, поскольку не соответствовали их предварительные условия, также как и отклоняемые маршрутизаторы. Например, используя конфигурацию по умолчанию, вы могли бы поместить::

    cannot_route_message = Remote domain not found in DNS

в первом маршрутизаторе, являющемся маршрутизатором **dnslookup**, с параметром **more** установленной в ложь, и

::

    cannot_route_message = Unknown local user

в последнем маршрутизаторе, где проверяются локальные пользователи. Если раскрытие строки этого параметра неудачно, используется сообщение по умолчанию. Если ошибка раскрытия не была неудачной принудительно, сообщение о ошибке пишется в главный лог и лог паники, в дополнение к обычному сообщению о ошибке маршрутизации.

.. index::
   pair: routers; casefull_local_part

======================  ============  =============  ==============
**caseful_local_part**  Use: routers  Type: boolean  Default: false
======================  ============  =============  ==============

По умолчанию, маршрутизаторы обрабатывают локальную часть адреса в регистронезависимой манере, хотя фактический регистр сохраняется, для передачи с сообщением. Если вы хотите, чтобы регистр букв был важен в маршрутизаторе, вы должны установить этот параметр в истину. Для индивидуальных параметров маршрутизатора, которые содержат адреса, или списки локальных частей (например, **local_parts**), сравнение с учётом регистра может быть включено путём ``+caseful``, как элемента списка. Смотрите раздел :ref:`10.20 <ch10_20>`, для получения дополнительных деталей.

Значение переменной $local_part принудительно приводится к нижнему регистру, когда маршрутизатор запущен без установленного параметра **caseful_local_part**. Когда маршрутизатор назначает адрес на транспортировку, когда транспорт выполняется, значение $local_part такое же. Точно также, когда маршрутизатор создает дочерний адрес путём перенаправления или подстановки синонима, значение $original_local_part и $parent_local_part те, которые использовались маршрутизатором **redirect**.

Эти параметры применяются к обработке адресов маршрутизатором. Когда адрес получателя обрабатывается в ACL, есть отдельный модификатор **control**, который может использоваться для задания регистрозависимой обработки в пределах ACL (смотрите раздел :ref:`40.20 <ch40_20>`).

.. index::
   pair: routers; check_local_user

====================  =============  =============  ==============
**check_local_user**  Use: routers‡  Type: boolean  Default: false
====================  =============  =============  ==============

Когда этот параметр истинна, Exim проверяет, что локальная часть адреса получателя (с удалёнными аффиксами, если они есть) - имя учётной записи в локальной системе. Проверка производиться путём вызова функции *getpwnam()*, вместо попытки напрямую прочитать */etc/passwd*. Это означает, что другие методы проверки данных пароля (типа NIS), также поддерживаются. Если локальная часть - локальный пользователь, переменная $home устанавливается из данных пароля, и может быть проверена в других предварительных условиях, оцениваемых после этого (порядок оценки даётся в разделе :ref:`3.12 <ch03_12>`). Однако, значение $home может быть замещено **router_home_directory**. Если локальная часть - не локальный пользователь, маршрутизатор пропускается.

Если вы хотите проверить, что локальная часть является именем пользователя, или совпадает с чем-то ещё, вы не можете объединять **check_local_user** с установкой **local_parts**, поскольку это определяет логическое “и” этих условий. Однако, вы можете использовать поиск **passwd** в установке **local_parts**, для достижения этого. Например::

    local_parts = passwd;$local_part : lsearch;/etc/other/users

Отметьте, однако, что побочные эффекты **check_local_user** (типа установки домашней директории) не происходят, когда поиск **passwd** используется в **local_parts** (или любых других) предварительных условиях.

.. index::
   pair: routers; condition

=============  =============  =============  ==============
**condition**  Use: routers‡  Type: string†  Default: unset
=============  =============  =============  ==============

Этот параметр определяет главный тест предварительного условия, который должен быть успешным, для вызова маршрутизатора. Параметр **condition** - последнее предварительное условие, для оценки (смотрите раздел :ref:`3.12 <ch03_12>`). Строка раскрывается, и если результат принудительно неудачен, или пустая строка, или одна из строк “0”, или “no”, или “false” (проверяется без учёта регистра), маршрутизатор пропускается, и адрес предлагается следующему.

Если результат - любое другое значение, маршрутизатор запускается (поскольку это - последнее предварительное условие для оценки, все другие предварительные условия должны быть истинными).

Параметр **condition** предоставляет средство применения персональных условий для запуска маршрутизаторов. Отметьте, что в случае простого раскрытия, значение раскрытия по умолчанию - именно то что требуется. Например::

    condition = ${if >{$message_age}{600}}

Из-за поведения по умолчанию раскрытия строки, это эквивалентно

::

    condition = ${if >{$message_age}{600}{true}{}}

Если раскрытие неудачно (кроме принудительной неудачи), поставка отсрочена. Некоторые другие параметры предварительные условий - общие специальные случаи, которые могли быть фактически определены, используя **condition**.

.. index::
   pair: routers; debug_print

===============  ============  =============  ==============
**debug_print**  Use: routers  Type: string†  Default: unset
===============  ============  =============  ==============

Если этот параметр установлен, и отладка включена (смотрите параметр командной строки - **-d**), строка раскрывается и включается в отладочный вывод. Если раскрытие строки неудачно, сообщение о ошибке записывается в отладочный вывод, и Exim продолжает обработку. Этот параметр предоставлен для помощи проверки значения переменных, и т.п. при отладке конфигурации маршрутизатора. Например, если кажется, что параметр **condition** не работает, **debug_print** может использоваться для вывода ссылающихся на неё переменных. Вывод происходит после проверки **domains**, **local_parts** и **check_local_user**, но до проверки любых других предварительных условий. Новая строка добавляется к тексту, если она не оканчивается этим символом.

.. index::
   pair: routers; disable_logging

===================  ============  =============  ==============
**disable_logging**  Use: routers  Type: boolean  Default: false
===================  ============  =============  ==============

Если этот параметр установлен в истину, ничего не записывается в лог для любых ошибок маршрутизации или для любых доставок, вызванных этим маршрутизатором. Вы не должны устанавливать этот параметр, если вы не понимаете что вы делаете. Также смотрите общий параметр транспортов, с тем же именем.

.. index::
   pair: routers; domains

===========  =============  ==================  ==============
**domains**  Use: routers‡  Type: domain list†  Default: unset
===========  =============  ==================  ==============

Если этот параметр установлен, маршрутизатор пропускается, когда текущий домен не совпадает со списком. Если совпадение произошло путём поиска по файлу, данные возвращённые поиском для домена, помещаются в $domain_data, для использования в раскрытиях строки частных параметров драйвера. Смотрите раздел :ref:`3.12 <ch03_12>`, для списка в каком порядке оцениваются предварительные условия.

.. index::
   pair: routers; driver

==========  ============  ============  ==============
**driver**  Use: routers  Type: string  Default: unset
==========  ============  ============  ==============

Этот параметр всегда должен быть установлен. Он определяет, какой из доступных маршрутизаторов должен использоваться.

.. index::
   pair: routers; errors_to

=============  ============  =============  ==============
**errors_to**  Use: routers  Type: string†  Default: unset
=============  ============  =============  ==============

Если маршрутизатор успешно обрабатывает адрес, он может назначить адрес на транспорт для доставки, или он может создать дочерний адрес. В обоих случаях, если происходят проблемы доставки в более поздних процессах обработки, результирующее сообщение рикошета посылается по адресу, являющемуся результатом раскрытия этой строки, при условии успешной проверки адреса. Параметр **errors_to** раскрывается до **headers_add**, **headers_remove** и **transport**.

Установка **errors_to**, связанная с адресом, может быть замещена, при последующем прохождении через другие маршрутизаторы, обладающие своими настройками **errors_to**, или если сообщение доставляется транспортом с установкой **return_path**.

Если **errors_to** незадана, или раскрытие принудительно неудачно, или ошибка при проверке результата раскрытия, используется адрес для ошибок связанный со входящим адресом. На верхнем уровне, это - отправитель конверта. Непринудительная ошибка раскрытия вызывает задержку доставки.

Если адрес, для которого установлена **errors_to**, завершается передачей через SMTP, отправитель конверта, для этой доставки, - значение **errors_to**, таким образом, любые рикошеты, созданые другими MTA на маршруте доставки, шлются туда же. Вы можете установить **errors_to** в пустую строку любой из этих установок::

    errors_to =
    errors_to = ""

Элемент раскрытия, приводящий к пустой строке, имеет тот же эффект. Если вы так делаете, локально обнаруженная ошибка доставки для адресов, обработанных этим маршрутизатором, не даёт начала рикошету; от ошибки отказываются. Если адрес доставляется на удалённый хост, путь возврата устанавливается в “<>”, если это не отменяется параметром **return_path** в транспорте.

Если по каким-то причинам вы хотите отказаться от локальных ошибок, но использовать не пустую команду MAIL для удалённой доставки, вы можете сохранить оригинальный обратный путь в $address_data маршрутизатора, и восстановить его в транспорте, установкой **return_path**.

Самое общее использование **errors_to** - прямой список список рассылки рикошетов к менеджерам списка, как описано в разделе :ref:`47.2 <ch47_02>`, или для осуществления VERP (Variable Envelope Return Paths) (смотрите раздел :ref:`47.6 <ch47_06>`).

.. index::
   pair: routers; expn 

========  =============  =============  =============
**expn**  Use: routers‡  Type: boolean  Default: true
========  =============  =============  =============

Если этот параметр выключен, маршрутизатор пропускается когда тестируется адрес как результат обработки команды SMTP EXPN. Вы могли бы, например, захотеть включить её на маршрутизаторе для пользовательских файлов *.forward*, когда оставляете их для файлов системных синонимов. Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.

Использование команды SMTP EXPN контролируется путём ACL (смотрите главу :ref:`40 <ch40_00>`). Когда Exim запускается командой EXPN, это подобно проверке адреса с **-bt**. Сравните VRFY, дубликат которой **-bv**.

===============  ============  =============  ==============
**fail_verify**  Use: routers  Type: boolean  Default: false
===============  ============  =============  ==============

Установка этого параметра создаёт эффект установки обоих параметров **fail_verify_sender** и **fail_verify_recipient** в тоже значение.

.. index::
   pair: routers; fail_verify_recipient 

=========================  ============  =============  ==============
**fail_verify_recipient**  Use: routers  Type: boolean  Default: false
=========================  ============  =============  ==============

Если этот параметр установлен в истину, и адрес принимается этим маршрутизатором когда проверяется получатель, проверка будет неудачна.

.. index::
   pair: routers; fail_verify_sender 

======================  ============  =============  ==============
**fail_verify_sender**  Use: routers  Type: boolean  Default: false
======================  ============  =============  ==============

Если этот параметр установлен в истину, и адрес принимается этим маршрутизатором когда проверяется отправитель, проверка будет неудачна.

.. index::
   pair: routers; fallback_hosts

==================  ============  =================  ==============
**fallback_hosts**  Use: routers  Type: string list  Default: unset
==================  ============  =================  ==============

Раскрытие строки не применяется к этому параметру. Аргумент должен быть списком имён хостов, или IP-адресов разделённых двоеточиями. Разделитель списка может быть изменён (смотрите раздел :ref:`6.19 <ch06_19>`), и порт может быть задан с каждым именем или адресом. Фактически, формат каждого элемента, точно такой же, как в списке хостов маршрутизатора **manualroute** (смотрите раздел :ref:`20.5 <ch20_05>`).

Если маршрутизатор стоит в очереди на адрес для удалённого транспорта, этот список хостов ассоциирован с адресом, и используется вместо запасного списка хостов транспорта. Если **hosts_randomize** установлена в транспорте, порядок списка случаен для каждого использования. Смотрите параметр **fallback_hosts** транспорта **smtp**, для дальнейших деталей.

.. index::
   pair: routers; group 

=========  ============  =============  ==================
**group**  Use: routers  Type: string†  Default: see below
=========  ============  =============  ==================

Когда маршрутизатор стоит в очереди на адрес для транспорта, и транспорт не определяет группу, используется группа данная тут, когда работает процесс доставки. Группа может быть задана в цифровой форме, или по имени. Если раскрытие неудачно, ошибка записывается в лог, и доставка задерживается. По умолчанию, она не задана, если не установлена **check_local_user**, когда значение по умолчанию берётся из информации о пароле. Также смотрите **initgroups**, и **user**, и обсуждение в главе :ref:`23 <ch23_00>`.

.. index::
   pair: routers; headers_add 

===============  ============  =============  ==============
**headers_add**  Use: routers  Type: string†  Default: unset
===============  ============  =============  ==============

Этот параметр задаёт строку текста, который раскрывается во время маршрутизации, и ассоциирован с любым адресом, который принят маршрутизатором. Однако, этот параметр не имеет никакого эффекта, когда адрес лишь проверяется. Способ, которым используется текст для добавления строк заголовков в транспорте, описан в разделе :ref:`44.17 <ch44_17>`. Фактически, новые строки заголовков не добавлены, пока сообщение в процессе транспортировки. Это означает, что ссылки на строки заголовков, в раскрытиях строк, в конфигурации транспорта продолжают “видеть” оригинальные заголовки [#]_.

Параметр **headers_add** раскрывается после **errors_to**, но до **headers_remove** и **transport**. Если раскрытая строка пуста, или если раскрытие принудительно неудачно, параметр не имеет эффекта. Другие ошибки раскрытия обрабатываются как ошибки конфигурации.

.. warning:: Параметр **headers_add** не может использоваться для маршрутизатора **redirect**, в котором установлен параметр **one_time**.

.. warning:: Если в маршрутизаторе установлен параметр **unseen**, все дополнения заголовков удаляются, при передаче следующему маршрутизатору. Для маршрутизатора **redirect**, если сгеренированный адрес - тот же самый что и входящий, это может указывать на дублирование адресов с различными модификациями заголовков. Exim не дублирует доставки (за исключением определённых случаев, в трубы - смотрите раздел :ref:`22.7 <ch22_07>`), но нездано от какого дубликата отказаться, таким образом этой неопределённой ситуации необходимо избегать. Может быть полезным параметр **repeat_use**, маршрутизатора **redirect**.

.. index::
   pair: routers; headers_remove

==================  ============  =============  ==============
**headers_remove**  Use: routers  Type: string†  Default: unset
==================  ============  =============  ==============

Этот параметр задаёт строку текста, который ракрывается во время маршрутизации, и ассоциирован с любым адресом, который принят маршрутизатором. Однако, этот параметр не имеет никакого эффекта, когда адрес лишь проверяется. Способ, которым используется текст для удаления строк заголовков в транспорте, описан в разделе :ref:`44.17 <ch44_17>`. Фактически, строки заголовков не удалены, пока сообщение в процессе транспортировки. Это означает, что ссылки на строки заголовков, в раскрытиях строк, в конфигурации транспорта продолжают “видеть” оригинальные заголовки [#]_.

Параметр **headers_remove** раскрывается после **errors_to** и **headers_add**, но до **transport**. Если раскрытие принудительно неудачно, параметр не имеет эффекта. Другие ошибки раскрытия обрабатываются как ошибки конфигурации.

.. warning:: Параметр **headers_remove** не может использоваться для маршрутизатора **redirect**, в котором установлен параметр **one_time**.

.. warning:: Если в маршрутизаторе установлен параметр **unseen**, все запросы на удаление заголовков удаляются, при передаче следующему маршрутизатору, и это может указывать на проблему с дубликатами - смотрите подобное предупреждение выше, для **headers_add**.

.. index::
   pair: routers; ignore_target_hosts

=======================  ============  ================  ==============
**ignore_target_hosts**  Use: routers  Type: host list†  Default: unset
=======================  ============  ================  ==============

Хотя этот параметр - список хостов, обычно он содержит IP-адреса, а не имена. Если любой хост, который ищется маршрутизатором имеет IP-адрес совпадающий с элементом этого списка, Exim ведёт себя так, будто этот IP-адрес не существует. Этот параметр позволяет вам справляться с мошенническими DNS-записями, типа

::

    remote.domain.example.  A  127.0.0.1

устанавливая

::

    ignore_target_hosts = 127.0.0.1

на релевантном маршрутизаторе. Если все хосты найденные маршрутизатором **dnslookup** забракованы таким образом, маршрутизатор отклоняется. В обычной конфигурации, попытка отправки почты на такой домен, обычно вызывает ошибку “unrouteable domain”, и попытка проверить адрес в домене будет неудачной. Точно также, если в маршрутизаторе **ipliteral** установлен параметр **ignore_target_hosts**, маршрутизатор отклоняется если представлен один из перечисленных адресов.
   
Вы можете использовать этот параметр для отключения использования IPv4 или IPv6 для доставки почты, путём первого или второго параметра настройки, соответственно::

    ignore_target_hosts = 0.0.0.0/0
    ignore_target_hosts = <; 0::0/0

Шаблон в первой строке совпадает со всеми адресами IPv4, тогда как шаблон во второй строке совпадает со всеми адресами IPv6.

Этот параметр также может быть полезен для игнорирования локальных связей и локальных сайтов адресов IPv6. Поскольку, как и все списки хостов, значение **ignore_target_hosts** раскрывается до использования в качестве списка, возможно сделать его зависимым от маршрутизируемого домена.

В процессе раскрытия, $host_address устанавливается в проверяемый IP-адрес.

.. index::
   pair: routers; initgroups

==============  ============  =============  ==============
**initgroups**  Use: routers  Type: boolean  Default: false
==============  ============  =============  ==============

Если маршрутизатор стоит в очереди на адрес для транспорта, и этот параметр истинна, и uid, предоставленный маршрутизатором не замещен транспортом, при работе транспорта вызывается функция *initgroups()* , для гарантии, что установлены любые дополнительные группы ассоциированные с uid. Также смотрите обсуждение **group** и **user** в главе :ref:`23 <ch23_00>`.

.. index::
   pair: routers; local_part_prefix

=====================  =============  =================  ==============
**local_part_prefix**  Use: routers‡  Type: string list  Default: unset
=====================  =============  =================  ==============

Если этот параметр установлен, маршрутизатор пропускается, если локальная часть не начинается с одной из заданных строк, или если **local_part_prefix_optional** истинна. Смотрите раздел :ref:`3.12 <ch03_12>` для получения списка в котором оцениваются предварительные условия.

Список сканируется слева направо, и используется первый совпавший префикс. Доступна ограниченная форма подстановочных знаков; если префикс начинается со звёздочки, он совпадает с самой длинной последовательностью символов в начале локальной части. Поэтому, звёздочка всегда должна сопровождаться каким-то символом, который не встречается в нормальных локальных частях. Подстановочные символы могут использоваться для установки многопользовательских почтовых ящиков, как описано в разделе :ref:`47.8 <ch47_08>`.

В процессе тестирования параметра **local_parts**, и когда маршрутизатор запущен, префикс удаляется из локальной части, и он доступен в переменной раскрытия $local_part_prefix. Когда сообщение доставляется, если маршрутизатор принимает адрес, это остаётся истинным в процессе последующей доставки транспортом. В частности, локальная часть, передаваемая командой RCPT для доставок LMTP, SMTP, и BSMTP, по умолчанию, удаляет префикс. Это поведение может быть перезадано путём установки **rcpt_include_affixes** в истину, в соответствующем транспорте.

Когда адрес проверяется, **local_part_prefix** затрагивает лишь поведение маршрутизатора. Если используется обратный вызов, это означает, что полный адрес, включая префикс, будет использоваться в обратном вызове.

Префиксы, обычно, используются для обработки локальных частей вида “owner-something”. Другое частое использование - поддержка локальных частей формы “real-username” для обхода пользовательского файла *.forward* - полезно, когда тяжело сказать пользователю, что его форвардинг кривой - путём помещения маршрутизатора типа такого, сразу до маршрутизатора, обрабатывающего файлы *.forward*::

    real_localuser:
           driver = accept
           local_part_prefix = real-
           check_local_user
           transport = local_delivery

В целях безопасности, возможно, хорошей идеей было бы ограничить использование этого маршрутизатора локально созданными сообщениями, используя условие типа такого::

    condition = ${if match {$sender_host_address}\
                           {\N^(|127\.0\.0\.1)$\N}}

Если оба **local_part_prefix** и **local_part_suffix** установлены для маршрутизатора, оба условия должны быть не дополнительными. Нужно быть осторожным, если подстановочный знак используется в обоих - префиксе и суффиксе в одном маршрутизаторе. Должны использоваться различные символы как разделители, для избежания двусмысленности.

.. index::
   pair: routers; local_part_prefix_optional

==============================  ============  =============  ==============
**local_part_prefix_optional**  Use: routers  Type: boolean  Default: false
==============================  ============  =============  ==============

Смотрите выше, параметр **local_part_prefix**.

.. index::
   pair: routers; local_part_suffix

=====================  =============  =================  ==============
**local_part_suffix**  Use: routers‡  Type: string list  Default: unset
=====================  =============  =================  ==============

Этот параметр работает точно также как и **local_part_prefix**, за исключением, что локальная часть должна заканчиваться (а не начинаться) данной строкой, параметр **local_part_suffix_optional** определяет, какой суффикс обязателен, и подстановочный символ “*”, если присутствует, должен быть последним символом суффикса. Это необязательное средство обычно используется для обработки локальных частей формы “something-request”, и многопользовательских почтовых ящиков вида “username-foo”.

.. index::
   pair: routers; local_part_suffix_optional

==============================  ============  =============  ==============
**local_part_suffix_optional**  Use: routers  Type: boolean  Default: false
==============================  ============  =============  ==============

Смотрите выше, параметр **local_part_suffix**.

.. index::
   pair: routers; local_parts

===============  =============  ======================  ==============
**local_parts**  Use: routers‡  Type: local part list†  Default: unset
===============  =============  ======================  ==============

Маршрутизатор запускается лишь если локальная часть адреса совпадает с этим списком. Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия, и раздел :ref:`10.21 <ch10_21>` для обсуждения списков локальных частей. Поскольку строка раскрывается, возможно сделать её зависимой от домена, например::

    local_parts = dbm;/usr/local/specials/$domain

Если поиском достигнуто соответствие, данные, возвращённые поиском для локальных частей, помещаются в переменную $local_part_data для использования в раскрытии частных параметров маршрутизатора. Вы могли бы использовать этот параметр, например, если у вас много локальных виртуальных доменов, и вы хотите слать всю почту постмастера в одно место, без необходимости установки синонима в каждом виртуальном домене::

    postmaster:
       driver = redirect
       local_parts = postmaster
       data = postmaster@real.domain.example

.. index::
   pair: routers; log_as_local

================  ============  =============  ==================
**log_as_local**  Use: routers  Type: boolean  Default: see below
================  ============  =============  ==================

Exim имеет два стиля записи в лог для доставки, с целью более явно отделить локальные доставки от удалённых. В “локальном” стиле,  адрес получателя даётся так же как и локальная часть, без домена. Использование этого стиля контролируется этим параметром. По умолчанию, она истинна для маршрутизатора **accept**, и ложна для всех остальных. Этот параметр применяется лишь когда маршрутизатор назначает адрес транспорту. Она не оказывает эффекта на маршрутизаторы, переадресовывающие адреса.

.. index::
   pair: routers; more

========  ============  ==============  =============
**more**  Use: routers  Type: boolean†  Default: true
========  ============  ==============  =============

Результат раскрытия строки, для этого параметра, должен быть допутимым булевым значением, т.е. одна из строк “yes”, “no”, “true”, или “false”. Любой другой результат вызывает ошибку, и доставка задерживается. Если раскрытие принудительно неудачное, используется значение по умолчанию(истина) параметра. Другие ошибки вызывают задержку доставки.

Если этот параметр установлен в ложь, и маршрутизатор отказывается обрабатывать адрес, дальнейшие маршрутизаторы не проверяются, маршрутизация неудачна, и сообщение рикошетит [#]_ . Однако, если маршрутизатор явно передаёт адрес следующему маршрутизатору, путём установки

::

    self = pass

или иначе, установка **more** игнорируется. Кроме того, установка **more** не затрагивает поведение, если одна из предварительных проверок неудачна. В этом случае, адрес всегда передаётся следующему маршрутизатору.
      
Отметьте, что **address_data** не является предварительным условием. Если это раскрытие принудительно неудачно, маршрутизатор отклоняется, и значение **more** контролирует, что происходит дальше.

.. index::
   pair: routers; pass_on_timeout

===================  ============  =============  ==============
**pass_on_timeout**  Use: routers  Type: boolean  Default: false
===================  ============  =============  ==============

Если у маршрутизатора таймаут в процессе поиска хоста, обычно это вызывает задержку адреса. Если установлена **pass_on_timeout**, адрес передаётся следующему маршрутизатору, отменяя **more**. Это может быть полезным для систем, которые периодически связаны с интернетом, или тем, которые хотят передавать умному хосту любые сообщение, которые не могут быть немедленно доставлены.

Тут могут быть другие случайные временные ошибки, которые могут произойти при поиске в DNS. Они обрабатываются таким же образом как таймауты, и этот параметр применяется ко всем ним.

.. index::
   pair: routers; pass_router

===============  ============  ============  ==============
**pass_router**  Use: routers  Type: string  Default: unset
===============  ============  ============  ==============

Маршрутизаторы, которые распознают общие параметра (**dnslookup**, **ipliteral** и **manualroute**) способны вернуть **pass**, принудительно продолжая маршрутизацию сообщения, и замещая ложную установку **more**. Когда один из этих маршрутизаторов возвращает **pass**, адрес обычно передаётся следующему маршрутизатору в последовательности. Это может быть изменено путём установки **pass_router** в имя другого маршрутизатора. Однако (в отличие от **redirect_router**), названный маршрутизатор должен быть ниже текущего маршрутизатора, для избежания петель. Отметьте, что этот параметр применяется лишь к специальному случаю **pass**. Он не применяется, когда маршрутизатор возвращает *decline*.

.. index::
   pair: routers; redirect_router

===================  ============  ============  ==============
**redirect_router**  Use: routers  Type: string  Default: unset
===================  ============  ============  ==============

Иногда администратор знает, что бессмысленно заново подвергать переработке адреса в том же самом маршрутизаторе, которые были созданы из файлов синонимов или перенаправлений. Например, если файл синонимов переводит реальные имена в идентификаторы логинов, нет смысла искать по файлу синонимов второй раз, особенно если это большой файл.

Параметр **redirect_router** может быть установлен в имя любого маршрутизатора. Это заставляет маршрутизацию любого созданного адреса начаться с именованного маршрутизатора, вместо первого маршрутизатора. Этот параметр не имеет эффекта, если есть маршрутизатор, в котором он установлена, не создает новые адреса.

.. index::
   pair: routers; require_files

=================  =============  ==================  ==============
**require_files**  Use: routers‡  Type: string list†  Default: unset
=================  =============  ==================  ==============

Этот параметр предоставляет главный механизм для утверждения работы маршрутизатора, на существовании или отсутствии определённых файлов или директорий. До запуска маршрутизатора, как одна из предварительных проверок, Exim обрабатывает этот способ через список **require_files**, отдельно раскрывая каждый его элемент.

Поскольку список разбивается до ракрытия, любые двоеточия в элементах раскрытия должны быть удвоены, или должно использоваться средство иного разделителя списка. Если какое-то раскрытие принудительно неудачно, этот элемент игнорируется. Другие ошибки раскрытия вызывают задержку маршрутизации адреса.

Если какая-либо раскрытая строка пуста, она игнорируется. Иначе, кроме как описано ниже, каждая строка должна быть полным путём к файлу, с необязательно предшествующим символом “!”. Пути передаются на тестирование функции *stat()*, для проверки существования файлов или каталогов. Маршрутизатор пропускается, если какой-либо путь, которому не предшествует “!”, не существует, или существует любой путь, с предшествующим “!”.

Если *stat()* не может определить, существует файл или нет, доставка сообщения задерживается. Это может произойти, если недоступны смонтированные по NFS файловые системы.

Этот параметр проверяется после параметра **domains**, **local_parts** и **senders**, таким образом, вы не можете её использовать для проверки существования файла, в котором ищется домен, локальная часть адреса, или отправитель. (Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.) Однако, поскольку все эти параметры являются раскрываемыми, вы можете использовать условие раскрытия **exists**, для создания таких проверок. Параметр **require_files** предназначен для проверки файлов, которые маршрутизатор может быть будет использовать внутри себя, или которые необходимы транспорту (например, *.procmailrc*).

В процессе доставки, функция *stat()* выполняется от root`a, но есть средство для некоторых проверок доступности файла от другого пользователя. Это не точная проверка разрешений, а “грубая” проверка, работающая следующим образом:
                  
Если элемент в списке **require_files** не содержит символов прямого слэша, он берётся как пользователь (и необязательная группа, отделённая двоеточием) для проверки последующих файлов в списке. Если группа не задана, но пользователь задан символически, используется gid ассоциированный с uid. Например::

    require_files = mail:/some/file
    require_files = $local_part:$home/.procmailrc

Если имя пользователя или группы в **require_files** не существует, условие **require_files** неуспешно. Exim выполняет проверку путём сканирования компонентов пути файла, и проверяя доступ для данных gid и uid. Это проверка на “x” для директорий, и “r” для финального файла. Отметьте, это означает, что при поддержке файловых ACL, они игнорируются.


.. warning:: Когда маршрутизатор начинает работу по проверке адресов для входящего SMTP-сообщения, Exim не работает от root`a, а под своим собственным uid. Это может затронуть результта проверки **require_files**. В частности, *stat()* может привести к ошибке EACCES (“Permission denied”). Это означает, что пользователю exim`a не разрешено читать одну из директорий в пути файла.

.. warning:: Даже когда Exim выполняется от root`a при доставке сообщения, *stat()* может привести к EACCES для файлов в NFS директории, смонтированной без доступа root`y. В этом случае, если запрошена проверка на доступ специфического пользователя, exim создаёт субпроцесс, который работает от пользователя, и снова пробует проверить в этом процессе.

Действие по умолчанию для обработки EACCES полагает, что это вызвано конфигурационной ошибкой, и маршрутизация задерживается, поскольку существование или отсутствие файла не может быть определено. Однако, в некоторых обстоятельствах, может быть желательным обработать это условие, как будто файл не существовал. Например::

    require_files = +/some/file

Если маршрутизатор - не основная часть проверки (например, он обрабатывает пользовательские файлы *.forward*), иное решение - установить установить параметр **verify** в ложь, тогда маршрутизатор был пропущен при проверке.

.. index::
   pair: routers; retry_use_local_part

========================  ============  =============  ==================
**retry_use_local_part**  Use: routers  Type: boolean  Default: see below
========================  ============  =============  ==================

Когда с доставкой присходит временная ошибка маршрутизации, в базе хинтов Exim`a создаётся запись о повторею Для адресов, маршрутизация которых зависит лишь от домена, ключ для записи повтора не должен содержать локальную часть, но для других адресов, обе - доменная и локальная части должны быть включены. Обычно, удалённая маршрутизация первого вида, и локальная маршрутизация - последнего.

Этот параметр контролирует, используется ли локальная часть для формирования подсказок [#]_ для адресов, которые подверглись временным ошибкам, будучи обработанными этим маршрутизатором. Значение по умолчанию - истина для любого маршрутизатора, который имеет установленную **check_local_user**, и ложь, в противном случае. Отметьте, что этот параметр не применяется к ключам подсказок для транспортных задержек; они контролируются одноимённой общей транспортным параметром.

Установка параметра **retry_use_local_part** применяется лишь к маршрутизатору, в котором он фигурирует. Если маршрутизатор создает дочерний адрес, они маршрутизируются независимо; эта установка не прилагается к ним.

.. index::
   pair: routers; router_home_directory

=========================  ============  =============  ==============
**router_home_directory**  Use: routers  Type: string†  Default: unset
=========================  ============  =============  ==============

Этот параметр устанавливает домашнюю  директорию, для использования при работе маршрутизатора. (Сравните **transport_home_directory**, который устанавливает домашнюю директорию для более поздней транспортировки.) В частности, если используется маршрутизатор **redirect**, этот параметр устанавливает значение $home, когда работает фильтр. Значение раскрывается; принудительная ошибка раскрытия вызывает игнорирование параметра - другие ошибки вызывают задержку маршрутизации.

Раскрытие **router_home_directory** происходит сразу после проверки **check_local_user** (если настроено), до любых будущих раскрытий. (Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.) Когда маршрутизатор работает, **router_home_directory** замещает значение $home, пришедшее из **check_local_user**.

Когда маршрутизатор принимает адрес и назначает его локальному транспорту (включая случаи, когда маршрутизатор **redirect** создает трубу, файл, или доставку автоответа), установка домашней директории для транспорта берётся из первого установленного значения:
* Параметра **home_directory** в транспорте;
* Параметра **transport_home_directory** в маршрутизаторе;
* Данных пароля, если параметр **check_local_user** установлен в маршрутизаторе;
* Параметра **router_home_directory**, в маршрутизаторе.

Другими словами, **router_home_directory** замещает данные пароля для маршрутизатора, но не для транспорта.

.. index::
   pair: routers; self

========  ============  ============  ===============
**self**  Use: routers  Type: string  Default: freeze
========  ============  ============  ===============

Этот параметр применяется к тем маршрутизаторам, которые используют адрес получателя для нахождения списка удалённых хостов. В настоящее время, это маршрутизаторы **dnslookup**, **ipliteral** и **manualroute**. Определённые конфигурации маршрутизатора **queryprogram** также могут задавать список удалённых хостов. Обычно, такие маршрутизаторы сконфигурированы для посылки сообщения к удалённому хосту через **smtp** транспорт. Параметр **self** задаёт, что происходит когда первый хост в списке оказывается локальным хостом. Способ проверки локального хоста Exim`ом, описан в разделе :ref:`13.8 <ch13_08>`.

Обычно, эта ситуация указывает на ошибку конфигурации в Exim`e (например, маршрутизатор должен быть настроен не обрабатывать этот домен), или ошибку в DNS (например, MX не должен указывать на этот хост). По этой причине, действие по умолчанию - записать в лог инцидент, задержать адрес, и заморозить сообщение. Следующие альтернативы предоставляются для использования в специальных случаях:

* **defer**
  Сообщение пробуется ещё раз доставить, позднее, но оно не заморожено.

* **reroute:** <domain>
  Домен изменяется на данный домен, и адрес передаётся назад, для обработки маршрутизаторами. Перезапись заголовков не производится. По существу, это поведение - переназначение.

* **reroute:** **rewrite:** <domain>
  Домен изменяется на заданный домен, и адрес возвращается назад, для повторной обработки маршрутизатором. Любые заголовки, которые содержат оригинальный домен, перезаписываются.

* **pass**
  Маршрутизатор передаёт адрес следующему маршрутизатору, или маршрутизатору названному в параметре **pass_router**, если она установлена. Это замещает **no_more**. В течение последующей маршрутизации и доставки, переменная $self_hostname содержит имя локального хоста, с которым столкнулся маршрутизатор. Это может использоваться для различения различных случаев, для хостов с несколькими именами. Комбинация

  ::
  
      self = pass
             no_more

  гарантирует, что передаются лишь те адреса, которые маршрутизировались к локальному хосту. Без **no_more**, адреса отклонённые по иным причинам, также будут передаваться следующему маршрутизатору.

* **fail**
  Доставка неудачна и создается отчёт о ошибке.

* **send**
  Аномалия игнорируется, и адрес ставиться в очередь для транспорта. Эта установка должна использоваться с критическим предостережением. Для транспорта **smtp**, это имеет смысл лишь в случаях, когда программа, слушающая SMTP-порт, не эта версия Exim`a. Таким образом,это должен быть какой-то иной MTA, или Exim с иным конфигурационным файлом, который обрабатывает домен иным способом.

.. index::
   pair: routers; senders

===========  =============  ===================  ==============
**senders**  Use: routers‡  Type: address list†  Default: unset
===========  =============  ===================  ==============

Если этот параметр установлен, маршрутизатор пропускается, если адрес отправителя сообщения не совпадает с чем-то в списке. Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.

Существуют проблемы относительно проверки, когда работа маршрутизаторов зависит от отправителя. Когда Exim проверяет адрес в установке **errors_to**, он устанавливает отправителя в нулевую (null) строку. Когда для проверки конфигурационного файла используется параметр командной строки **-bt**, также необходимо использовать параметр **-f**, для установки соответствующего отправителя. Для входящей почты, отправитель не установлен, когда проверяется отправитель, но он доступен, когда проверяется любой получатель. Если включена команда SMTP VRFY, она должна использоваться после MAIL, если имеет значение адрес отправителя.

.. index::
   pair: routers; translate_ip_address

========================  ============  =============  ==============
**translate_ip_address**  Use: routers  Type: string†  Default: unset
========================  ============  =============  ==============

Существует несколько редких сетевых ситуаций (например, пакетная радиосвязь), когда полезна возможность транслировать IP-адрес, созданный нормальными механизмами маршрутизации, в другие IP-адреса, выполняя свого рода ручную маршрутизацию. Это должно быть сделано, лишь если нормальная IP-маршрутизация TCP/IP стека неадекватна, или не работает. Поскольку это - чрезвычайно необычное требование, код для поддержки этого параметра не включается в исполняемый файл Exim`a, если в *Local/Makefile* не установлен параметр 

::

    SUPPORT_TRANSLATE_IP_ADDRESS=yes.
   
Строка **translate_ip_address** раскрывается для каждого IP-адреса созданного маршрутизатором, с установкой созданного IP-адреса в $host_address. Если раскрытие принудительно неудачно, никаких действий не предпринимается. Для любых других ошибок раскрытия, доставка сообщения задерживается. Если результат раскрытия - IP-адрес, он заменяет оригинальный адрес; иначе, предполагается что результат является именем хоста, он ищется используя *gethostbyname()* (или *getipnodebyname()*, когда она доступна) для создания одного и более замещающих IP-адресов. Например, для отмены всех адресов в некоторых сетях, к маршрутизатору может быть добавлено такое::

    translate_ip_address = \
       ${lookup{${mask:$host_address/26}}lsearch{/some/file}\
               {$value}fail}}

Файл содержал бы такие строки::

    10.2.3.128/26    some.host
    10.8.4.34/26     10.44.8.15

Вы не должны использовать это средство, если вы не понимаете, что оно делает.

.. index::
   pair: routers; transport

=============  ============  =============  ==============
**transport**  Use: routers  Type: string†  Default: unset
=============  ============  =============  ==============

Этот параметр определяет транспорт который будет использован когда маршрутизатор принимает адрес, и устанавливает его для доставки. Транспорт никогда не бывает нужен, если маршрутизатор используется лишь для проверки. Значение параметра раскрывается во время маршрутизации, после раскрытия **errors_to**, **headers_add** и **headers_remove**, и результта должен быть именем одного из настроенных транспортов. Если это не так, доставка задерживается.

Параметр **transport** не используется маршрутизатором **redirect**, но он имеет некоторые частные параметры которые устанавливают транспорты для трубы (pipe) и доставки в файл (смотрите главу :ref:`22 <ch22_00>`).

.. index::
   pair: routers; transport_current_directory

===============================  ============  =============  ==============
**transport_current_directory**  Use: routers  Type: string†  Default: unset
===============================  ============  =============  ==============

Этот параметр ассоциирует текущую директорию с любым адресом, который маршрутизируется локальным транспортом. Это может происходить потому, что транспорт явно сконфигурирован для маршрутизатора, или потому что моздается доставка в файл или трубу. В течение процесса доставки (т.е. в транспортное время), строка этого параметра раскрывается и устанавливает текущую директорию, исключая замещения установкой транспорта. Если раскрытие неудачно по любой причине, включая принудительную неудачу, ошибка записывается в лог и доставка задерживается. Смотрите главу :ref:`23 <ch23_00>`, для получения деталей о окружении локальной доставки.

.. index::
   pair: routers; transport_home_directory

============================  ============  =============  ==================
**transport_home_directory**  Use: routers  Type: string†  Default: see below
============================  ============  =============  ==================

Этот параметр ассоциирует домашнюю директорию с любым адресом, который маршрутизируется локальным транспортом. Это может происходить потому, что транспорт явно сконфигурирован для маршрутизатора, или потому что создается доставка в файл или трубу. В течение процесса доставки (т.е. в транспортное время), строка этого параметра раскрывается и устанавливает домашнюю директорию, исключая замещения установкой **home_directory** в транспорте. Если раскрытие неудачно по любой причине, включая принудительную неудачу, ошибка записывается в лог и доставка задерживается.

Если транспорт не определяет домашнюю директорию, и **transport_home_directory** не установлена для маршрутизатора, домашняя директория для транспорта берётся из данных пароля, если для маршрутизатора установлен параметр **check_local_user**. Иначе, она берётся из **router_home_directory**, если она установлена; если нет - домашняя директория для транспорта не устанавливается.

Смотрите главу :ref:`23 <ch23_00>`, для получения деталей о окружении локальной доставки.

.. index::
   pair: routers; unseen

==========  ============  ==============  ==============
**unseen**  Use: routers  Type: boolean†  Default: false
==========  ============  ==============  ==============

Результат раскрытия строки, для этого параметра, должен быть допустимым булевым значением, т.е. одной из строк “yes”, “no”, “true”, или “false”. Любой другой результат вызывает ошибку, и доставка задерживается. Если раскрытие принудительно неудачно, используется значение по умолчанию этого параметра(ложь). Другие ошибки вызывают задержку доставки.

Когда этот параметр установлен в истину, маршрутизация не прекращается, если маршрутизатор принимает адрес. Вместо этого, копия входящего адреса передаётся следующему маршрутизатору, замещая ложную установку параметра **more**. Есть небольшая точка, в установке **more** в ложь, если **unseen** всегда истинно, но это может быть полезным в случаях, когда значение **unseen** содержит раскрываемый элемент (поэтому, оно иногда истинно, а иногда ложно).

Установка параметра **unseen** имеет эффект подобный команде **unseen** в файлых фильтров. Она может использоваться для доставки копий сообщений на другой адрес, когда, также, необходимо выполнить нормальную доставку. В действительности, текущий адрес превращается в “родителя”, имеющего двух детей - один из которых доставляется как задано в маршрутизаторе, и клон, продолжающий дальнейшую маршрутизацию. Поэтому, **unseen** не может быть объединён с параметром **one_time**, в маршрутизаторе **redirect**.

.. warning:: Добавленные к адресу строки заголовков (или определённые для удаления), этим или предыдущим маршрутизаторами, затрагивают лишь “невидимую” копию сообщения. Клон, который продолжает обрабатываться будущими маршрутизаторами, не содержит добавленный или определённых на удаление заголовков. Для маршрутизатора **redirect**, если моздан адрес - такой же как и входящий адрес, это может индицировать дубликацию адресов с различной модификацией заголовков. Exim не дублирует доставки (за исключением определённых случаев, в трубы - смотрите раздел :ref:`22.7 <ch22_07>`), но нездано от какого дубликата отказаться, таким образом этой неопределённой ситуации необходимо избегать. Может быть полезен параметр **repeat_use**, маршрутизатора **redirect**.

В отличие от обработки модификации заголовков, любые данные установленные параметром **address_data** в текущем или предыдущем маршрутизаторе, передаются последующим маршрутизаторам.

.. index::
   pair: routers; user

========  ============  =============  ==================
**user**  Use: routers  Type: string†  Default: see below
========  ============  =============  ==================

Когда маршрутизатор стоит в очереди на адрес для транспорта, и транспорт не определяет пользователя, заданный тут пользователь используется при работе процесса доставки. Пользователь может быть задан числом или по имени. Если раскрытие неудачно, ошибка записывается в лог и доставка задерживается. Также, этот пользователь используется маршрутизатором **redirect**, при работе файла фильтра. По умолчанию она не задана, кроме случаев когда установлен параметр **check_local_user**. В этом случае, значение по умолчанию берётся из информации пароля. Если пользователь задан по имени, и “group” не задана, группа ассоциируется с используемым пользователем. Смотрите обсуждение **initgroups** и **initgroups** в главе :ref:`23 <ch23_00>`.

.. index::
   pair: routers; verify

==========  =============  =============  =============
**verify**  Use: routers‡  Type: boolean  Default: true
==========  =============  =============  =============

Установка этого параметра имеет эффект установки **verify_sender** и **verify_recipient** в тоже значение.

.. index::
   pair: routers; verify_only

===============  =============  =============  ==============
**verify_only**  Use: routers‡  Type: boolean  Default: false
===============  =============  =============  ==============

Если этот параметр установлен, маршрутизатор используется лишь для проверки адреса, или тестирования с параметром **-bv**, не для фактической доставки, тестирования с параметром **-bt**, или запуска команды SMTP EXPN. Далее, она может быть ограничена только проверкой отправителя или получателя, путём **verify_sender** и **verify_recipient**.

.. warning:: Когда маршрутизатор работает проверяя адрес входящего SMTP сообщения, Exim не работает от root`a, а под своим собственным uid.  Если маршрутизатор обращается к каким-то файлам, вы должны удостовериться, что они доступны пользователю или группе Exim`a.

.. index::
   pair: routers; verify_recipient

====================  =============  =============  =============
**verify_recipient**  Use: routers‡  Type: boolean  Default: true
====================  =============  =============  =============

Если этот параметр ложь, маршрутизатор пропускается при проверке адреса получателя, или тестировании проверки получателя, с использованием параметра командной строки **-bv**. Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.

.. index::
   pair: routers; verify_sender

=================  =============  =============  =============
**verify_sender**  Use: routers‡  Type: boolean  Default: true
=================  =============  =============  =============

Если этот параметр ложь, маршрутизатор пропускается при проверке адреса отправителя, или тестировании проверки отправителя, с использованием параметра командной строки **-bvs**. Смотрите раздел :ref:`3.12 <ch03_12>`, для получения порядка, в котором оцениваются предварительные условия.

.. [#] т.е. не видят добавленные - прим. lissyara
.. [#] т.е. видят удалённые - прим. lissyara
.. [#] посылается рикошет - прим. lissyara
.. [#] хинтов - прим. lissyara
