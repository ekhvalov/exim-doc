
.. _ch21_00:

Маршрутизатор **queryprogram**
==============================

Маршрутизатор **queryprogram** маршрутизирует адрес путем вызова внешней команды и после действует в соответствии с ее выводом. Это достаточно тяжеловесный способ маршрутизации и предназначен он главным образом для несильно нагруженных систем или для экспериментов. Однако, если есть возможность использовать параметры предусловий (**domains**, **local_parts**, и т.д. ), чтобы пропускать этот маршрутизатор для большинства адресов, то он может использоваться в специальных целях даже на загруженном узле. Ниже перечислены следующие частные параметры маршрутизатора:


.. index::
   pair: queryprogram; command 

===========  =================  =============  ==============
**command**  Use: queryprogram  Type: string†  Default: unset
===========  =================  =============  ==============

Данный параметр должен быть обязательно установлен. Он определяет команду, которая должна запускаться. Команда разделяется на имя команды и ее аргументы, и затем каждый из них преобразуется отдельно (точно так же как и для транспорта **pipe**, описанного в главе :ref:`29 <ch29_00>`).

.. index::
   pair: queryprogram; command_group

=================  =================  ============  ==============
**command_group**  Use: queryprogram  Type: string  Default: unset
=================  =================  ============  ==============

Этот параметр определяет групповой идентификатор (gid) для запуска команды. Он должен быть установлен в том случае, если параметру **command_user** присвоено числовое значение идентификатора пользователя (uid). Если данный параметр начинается с цифры, то она интерпретируется как числовое значение группового идентификатора (gid). В противном случае, поиск его значения выполняется путем вызова функции *getgrnam()*.

.. index::
   pair: queryprogram; command_user

================  =================  ============  ==============
**command_user**  Use: queryprogram  Type: string  Default: unset
================  =================  ============  ==============

Данный параметр должен быть обязательно установлен. Он определяет идентификатор пользователя (uid), от имени которого должна быть выполнена команда. Если параметр начинается с цифры, то он интерпретируется как числовое значение идентификатора пользователя. В противном случае, поиск ее значения выполняется при помощи функции *getpwnam()*, а если не определен параметр **command_group**, то также происходит и поиск значения группового идентификатора gid.

.. warning:: Изменение uid и gid возможно лишь когда Exim запущен от пользователя root, что происходит, в нормальной конфигурации, во время доставки. Однако, во время проверки адреса, в процессе приёма сообщения, Exim, обычно работает не от пользователя root. Если маршрутизатор **queryprogram** вызывается не от root, то Exim не может изменить uid или gid до выполнения команды. В таких обстоятельствах, команда выполняется с текущими gid и uid.

.. index::
   pair: queryprogram; current_directory

=====================  =================  ============  ==========
**current_directory**  Use: queryprogram  Type: string  Default: /
=====================  =================  ============  ==========

Этот параметр определяет абсолютный путь, куда происходит переход перед запуском команды.

.. index::
   pair: queryprogram; timeout

===========  =================  ==========  ===========
**timeout**  Use: queryprogram  Type: time  Default: 1h
===========  =================  ==========  ===========

Если команда не завершается в течение периода таймаута, то ее группа процессов уничтожается и сообщение замораживается. Нулевое значение времени указывает на отсутствие таймаута.

Стандартный вывод команды направляется в конвейер (pipe), чтение из которого производится после завершения команды. Он должен состоять из одной строки вывода, содержащей до 5 полей, разделенных пробелами. Максимальная длинна строки 1023 символа. Более длинные линии укорачиваются. Первое поле является одним из ниже перечисленных слов (независимо от регистра):

* *Accept*: маршрутизация выполнена успешно; остальные поля определяют какие действия выполнять (см. ниже).
* *Decline*: маршрутизатор отклоняется; передать адрес на следующий маршрутизатор, если только не установлен параметр **no_more**
* *Fail*: маршрутизация завершилась неудачно; адрес последующим маршрутизаторам не передаётся. Весь последующий текст является сообщением об ошибке. Если запуск маршрутизатора выполняется как часть проверки адреса во время входящего SMTP сообщения, то сообщение включается в SMTP-ответ.
* *Defer*: в данный момент маршрутизация не может быть завершена; попробуйте позже еще раз. Весь следующий за этим текст в строке является сообщением об ошибке, которое записывается в журнал. Сообщение не включается в SMTP-ответ.
* *Freeze*: то же что и *defer*, за исключением того, что сообщение замораживается.
* *Pass*: передать адрес на следующий маршрутизатор (или на маршрутизатор, определенный параметром **pass_router**), перекрывая параметр **no_more**.
* *Redirect*: сообщение перенаправляется. Оставшаяся часть строки представляет собой список новых адресов, маршрутизируемых независимо друг от друга, начиная с первого маршрутизатора, либо с маршрутизатора, определенного параметром **redirect_router**.

Если первым словом является *accept*, то остаток строки состоит из некоторого количества ключевых слов и их значений, например так (строка разделена на две, для того, чтобы уместить по ширине страницы)::

    ACCEPT TRANSPORT=<transport> HOSTS=<list of hosts>
    LOOKUP=byname|bydns DATA=<text>
    
Данные могут быть указаны в произвольном порядке, к тому же все они являются необязательными. Если не определен транспорт, то используется транспорт, описанный общим параметром **transport**. Список узлов и тип поиска необходимы только в том случае, если транспортом является транспорт **smtp**, который не может самостоятельно определить список узлов.

Формат списка узлов такой же как и для маршрутизатора **manualroute**. Он может содержать как IP-адреса и имена узлов, так и имена с последующим суффиксом “/MX” для определения подсписков узлов, полученных путем поиска MX-записей.

Если тип поиска не определен, то Exim ведет себя следующим образом во время попыток нахождения IP-адреса для каждого узла: Сначала выполняется DNS-запрос. Если в результате возвращается что-либо, отличное от HOST_NOT_FOUND, то используется этот результат. В противном случае, Exim вызывает функцию *getipnodebyname()* или *gethostbyname()*, и результатом поиска в этом случае является результат этого вызова.

Если установлено поле DATA, то его значение помещается в переменную $address_data. Например, данная возвращенная строка

::

    accept hosts=x1.y.example:x2.y.example data="rule1"

маршрутизирует адрес на транспорт по умолчанию, список узлов состоит из двух узлов. Если транспорт запускается, то строка “rule1” помещается в переменную $address_data.


