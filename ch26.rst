
.. _ch26_00:

Транспорт **appendfile**
========================

Транспорт **appendfile** доставляет сообщения путём добавления его к существующему файлу, или путём создания нового файла в заданной директории. Отдельные файлы, к которым добавляются сообщения, могут быть в традиционном формате UNIX mailbox, или, необязательно, в формате MBX, поддерживаемом Pine MUA и даемоном University of Washington IMAP (его поддерживают и другие). Когда каждое сообщение доставляется в отдельный файл, может использоваться, необязательно, формат **maildir**, для дополнительной защиты от ошибок при доставке. Также поддерживается третья форма доставки в отдельные файлы, известная как **mailstore**. Для всех этих форматов, Exim, в случае необходимости, пытается создать необходимое число уровней директорий, при условии что установлен параметр **create_directory**.

Код для необязательных форматов, по умолчанию не включен в бинарный файл Exim`a. Для включения соответствующего кода, необходимо в *Local/Makefile* установить SUPPORT_MBX, SUPPORT_MAILDIR и/или SUPPORT_MAILSTORE.

Exim распознаёт ошибки системной квоты, и создаст соответствующее сообщение. Также он поддерживает собственное управление квотами в транспорте, для использования когда системные средства недоступны, или по каким-то причинам не могут использоваться.

Если ошибка происходит при добавлении к файлу (например, квота превышена или заполнился раздел), Exim пытается восстановить старый размер файла и время его модификации. Если ошибка происходит при создании нового файла - файл удаляется.

Выполняется множество проверок безопасности до начала добавления новой информации к файлу, а сам файл блокируется. Детальное описание дано ниже, после списка частных параметров.

Обычно, транспорт **appendfile** используется для локальной доставки в пользовательские ящики. Однако, он также может использоваться как псевдо-удалённый транспорт, для раскладывания сообщений в файлы, для удалённой доставки другими средствами, кроме Exim`a. В этом случае, часто используется формат “пакетного SMTP” (смотрите параметр **use_bsmtp**).

.. _ch26_01:

Параметры **file** и **directory**
----------------------------------

Параметр **file** определяет единичный файл, к которому добавляются сообщения; параметр **directory** определяет директорию, в которой создаётся новый файл, содержащий сообщение. Может быть задана лишь одна из этих двух параметров, и для нормальной доставки в почтовые ящики, один из них должен быть установлен.

Однако, **appendfile** также используется для доставки сообщений в файлы или директории, имена которых (или части имён) получаются из синонимов, правил перенапрвления, или операций фильтрации (например, команды **save** в пользовательском фильтре Exim`a). Когда выполняется такой транспорт, $local_part содержит локальную часть, которая была синонимом или результатом перенаправления, и $address_file содержит имя (или часть имени) файла или директории, созданное операцией перенаправления. Есть два случая:

* Если не установлены ни **file** ни **directory**, операция перенаправления должна определить абсолютный путь (тот, который начинается с “/”). Это - большинство общих случаев, когда пользователи с локальными учетными записями используют фильтрацию для сортировки почты по различным директориям. Смотрите, для примера, транспорт **address_file**, в конфигурации по умолчанию. Если путь завершается слэшем, предполагается, что это - имя директории. Доставка в директорию может быть вызвана  путём установки **maildir_format** или **mailstore_format**.
* Если **file** или **directory** установлены для доставки от переназначения [#]_, она используется для определения имени файла или директории для доставки. Обычно, содержимое $address_file используется каким-то образом в раскрытии строки.

Как пример второго случая, рассмотрите окружение где пользователи не имеют домашних директорий. Им можно разрешить использование команды фильтра Exim`a в форме::

    save folder23

или команды фильтра Sieve в форме::

    require "fileinto";
    fileinto "folder23";

В этой ситуации, раскрытие **file** или **directory** в транспорте должно преобразовать относительный путь в соответствующее абсолютное имя файла. В случае фильтров Sieve, должно быть обработано имя *inbox*. Это имя, используемое в качестве результата действия “keep” (“сохранить”), в фильтре. Этот пример показывает один способ обработать это требование::

    file = ${if eq{$address_file}{inbox} \
                {/var/mail/$local_part} \
                {${if eq{${substr_0_1:$address_file}}{/} \
                      {$address_file} \
                      {$home/mail/$address_file} \
                }} \
            }

С этой установкой параметра **file**, *inbox* ссылается на стандартное расположение почтового ящика, абсолютные пути используются без изменения, и другие папки находятся в директории *mail*, внутри домашней директории.

.. note:: При обработке в фильтре Exim`a, относительный путь, типа *folder23* превращается в абсолютный, если маршрутизатору известна домашняя директория. В частности, так обстоят дела, если установлен параметр **check_local_user**. Если вы хотите предотвратить это во время маршрутизации, вы должны установить **router_home_directory** в пустое значение. Это вынуждает маршрутизатор передавать транспорту относительный путь. 

.. note:: Абсолютный путь в $address_file не обрабатывается как-то особенно; продолжает использоваться параметр **file** или **directory**, если он установлен.

.. _ch26_02:

Частные параметры для **appendfile**
------------------------------------

.. index::
   pair: appendfile; allow_fifo

==============  ===============  =============  ==============
**allow_fifo**  Use: appendfile  Type: boolean  Default: false
==============  ===============  =============  ==============

Установка этого параметра позволяет доставлять в именованные каналы (трубы, или FIFO) точно также как и в обычные файлы. Если, во время доставки, отсутствует процесс читающий трубу, доставка задерживается.

.. index::
   pair: appendfile; allow_symlink

=================  ===============  =============  ==============
**allow_symlink**  Use: appendfile  Type: boolean  Default: false
=================  ===============  =============  ==============

По умолчанию, **appendfile** не доставляет, если имя пути к файлу будет символической ссылкой. Установка этого параметра смягчает это ограничение, но существуют проблемы безопасности связанные с использованием символических ссылок. Убедитесь, что вы знаете, что делаете, при установке этого параметра. Точные детали того, что затрагивает этот параметр, находятся после этого списка параметров.

.. index::
   pair: appendfile; batch_id

============  ===============  =============  ==============
**batch_id**  Use: appendfile  Type: string†  Default: unset
============  ===============  =============  ==============

Смотрите описание пакетной локальной доставки в главе :ref:`25 <ch25_00>`. Однако, пакетная доставка автоматически отключается для доставок **appendfile**, происходящих как результат перенаправления, подстановки синонима, или других переназначений прямо в файл.

.. index::
   pair: appendfile; batch_max

=============  ===============  =============  ==========
**batch_max**  Use: appendfile  Type: integer  Default: 1
=============  ===============  =============  ==========

Смотрите описание пакетной локальной доставки в главе :ref:`25 <ch25_00>`.

.. index::
   pair: appendfile; check_group

===============  ===============  =============  ==============
**check_group**  Use: appendfile  Type: boolean  Default: false
===============  ===============  =============  ==============

Когда этот параметр установлен, проверяется группа владельца файла, заданного параметром **file**, для проверки, что это та же самая группа, под которой выполняется процесс доставки. Настройка по умолчанию - ложь, поскольку режим по умолчанию - 0600, что означает, что группа не имеет значения.

.. index::
   pair: appendfile; check_owner

===============  ===============  =============  =============
**check_owner**  Use: appendfile  Type: boolean  Default: true
===============  ===============  =============  =============

Когда этот параметр установлен, проверяется владелец файла, заданного параметром **file**, для удостоверения, что он тот же самый, под которым выполняется процесс доставки.

.. index::
   pair: appendfile; check_string

================  ===============  ============  ==================
**check_string**  Use: appendfile  Type: string  Default: see below
================  ===============  ============  ==================

Поскольку **appendfile** записывает сообщение, начало каждой строки проверяется на совпадение с **check_string**, и если оно происходит, совпавшие начальные символы заменяются на содержимое **escape_string**. Значение **check_string** - символьная строка, а не регулярное выражение, и регистр содержащихся букв имеет значение.

Если установлена **use_bsmtp**, значение **check_string** и **escape_string** принудительно устанавливаются в “.” и “..”, соответственно, и любые конфигурационные настройки игнорируются. Иначе, - у них значения по умолчанию “From ” и “>From ” когда задан параметр  **file**, и не заданы, когда установлен любой из параметров **directory**, **maildir** или **mailstore**.

Настройки по умолчанию, наряду с **message_prefix** и **message_suffix**, являются подходящими для традиционных “BSD” почтовых ящиков, где строка, начинающаяся с “From ” указывает на начало нового сообщения. Все четыре параметра нуждаются в изменении, если используется иной формат. Например, для доставки в почтовые ящики в формате MMDF::

    check_string = "\1\1\1\1\n"
    escape_string = "\1\1\1\1 \n"
    message_prefix = "\1\1\1\1\n"
    message_suffix = "\1\1\1\1\n"

.. index::
   pair: appendfile; create_directory

====================  ===============  =============  =============
**create_directory**  Use: appendfile  Type: boolean  Default: true
====================  ===============  =============  =============

Когда этот параметр истинна, Exim пытается создать любые недостающие вышестоящие директории, для файла в который собирается производить запись. Режим созданного каталога, задаётся параметром **directory_mode**.

Владелец группы созданной директории сильно зависит от используемой операционной системы (и, возможно, файловой системы). Например, в Solaris, если родительский каталог имеет установленный бит “setgid”, его группа передаётся дочернему каталогу; если нет, используется текущая установленная группа. Однако, в FreeBSD, всегда используется родительская группа.

.. index::
   pair: appendfile; create_file

===============  ===============  ============  =================
**create_file**  Use: appendfile  Type: string  Default: anywhere
===============  ===============  ============  =================

Этот параметр ограничивает местоположение файлов и директорий создаваемых этим транспортом. Это применяется к файлам, заданным параметром **file**, и директориям, заданным параметром **directory**. В случае доставки maildir, это применяется к директориям верхнего уровня, а не к нижележащим директориям maildir.

Параметр должен быть установлен в одно из слов “anywhere”, “inhome”, или “belowhome”. Во втором и третьем случае, для транспорта должна быть установлена домашняя директория. Этот параметр бесполезен, когда задаётся явное имя файла для обычной доставки в почтовые ящики. Она предназначена для случая, когда имя файла создается из пользовательских файлов *.forward*. Обычно, они обрабатываются транспортом **appendfile**, вызванным **address_file**. Также, смотрите параметр **file_must_exist**.

.. index::
   pair: appendfile; directory

=============  ===============  =============  ==============
**directory**  Use: appendfile  Type: string†  Default: unset
=============  ===============  =============  ==============

Этот параметр взаимоисключающий с параметром **file**, но один из параметра **file** или **directory** должен быть задан, исключая случай доставки как результата перенаправления (смотрите раздел :ref:`26.1 <ch26_01>`).

Когда задан параметр **directory**, строка раскрывается, и сообщение доставляется в новый файл или файлы, или в подкаталог данного каталога, вместо добавления к единственному файлу почтового ящика. Поддерживается несколько различных форматов (смотрите **maildir_format** и **mailstore_format**), и смотрите раздел :ref:`26.4 <ch26_04>`, для дальнейших деталей о этой форме доставки.

.. index::
   pair: appendfile; directory_file

==================  ===============  =============  ==================
**directory_file**  Use: appendfile  Type: string†  Default: see below
==================  ===============  =============  ==================

Когда установлен параметр **directory**, но не установлены ни **maildir_format** ни **mailstore_format**, **appendfile** доставляет каждое сообщение в файл, имя которого получается в результате раскрытия строки этого параметра. Значение по умолчанию::

    q${base62:$tod_epoch}-$inode

Значение по умолчанию создаст уникальное имя из текущего времени, в форме base62, и inode файла. Переменная $inode доступна лишь при раскрытии этого параметра.

.. index::
   pair: appendfile; directory_mode

==================  ===============  ===================  =============
**directory_mode**  Use: appendfile  Type: octal integer  Default: 0700
==================  ===============  ===================  =============

Если **appendfile** создаёт какие-либо директории как результат параметра **create_directory**, их режим задаётся этим параметром.

.. index::
   pair: appendfile; escape_string

=================  ===============  ============  ========================
**escape_string**  Use: appendfile  Type: string  Default: see description
=================  ===============  ============  ========================

Смотрите выше, параметр **check_string**.

.. index::
   pair: appendfile; file

========  ===============  =============  ==============
**file**  Use: appendfile  Type: string†  Default: unset
========  ===============  =============  ==============

Эта параметр взаимоисключающий с параметром **directory**, но один из параметров **file** или **directory** должен быть задан, исключая случай доставки как результата перенаправления (смотрите раздел :ref:`26.1 <ch26_01>`). Параметр **file** определяет единичный файл, к которому добавляется сообщение. Один и более из параметров **use_fcntl_lock**, **use_flock_lock** или **use_lockfile** должны быть заданы с параметром **file**.

Если вы используете более одного хоста для доставки через NFS в одни и те же почтовые ящики, вы всегда должны использовать файлы блокировки

Значение строки раскрывается для каждой доставки, и должно привести к абсолютному пути. Самые общие установки этого параметра - вариации одного из этих примеров::

    file = /var/spool/mail/$local_part
    file = /home/$local_part/inbox
    file = $home/inbox

В первом примере, все доставки осуществляются в один и тот же каталог. Если Exim сконфигурирован использовать файлы блокировки (смотрите ниже, параметр **use_lockfile**), он должен быть в состоянии создать файл в директории, таким образом, “липкий” (“sticky”) бит должен быть включен для возможности доставки, или, альтернативно, может использоваться параметр **group** для выполнения доставки под групповым идентификатором, имеющим доступ к директории.

.. index::
   pair: appendfile; file_format

===============  ===============  ============  ==============
**file_format**  Use: appendfile  Type: string  Default: unset
===============  ===============  ============  ==============

Этот параметр просит транспорт проверить формат существующего файла, до добавления к нему. Проверка состоит из соответствия специфической строке в начале файла. Значение параметр состоит из чётного числа строк, разделённых двоеточиями. Первая из каждой пары - проверочная строка, и вторая - имя транспорта. Если транспорт, ассоциированный с совпавшей строкой, не является текущим транспортом, управление передаётся другому транспорту. Например, предположим что к стандартному транспорту **local_delivery** добавлено это::

    file_format = "From       : local_delivery :\
                   \1\1\1\1\n : local_mmdf_delivery"

Почтовые ящики, начинающиеся с “From”, продолжают обрабатываться этим транспортом, но для почтовых ящиков, начинающиеся с четырёх двоичных единиц, с символом новой строки, управление передаётся транспорту назваемому **local_mmdf_delivery**, который, видимо, сконфигурирован для осуществления доставки в формате MMDF. Если почтовый ящик не существует, или пуст, предполагается совпадение с текущим транспортом. Если начало почтового ящика не совпадает ни с одной строкой, или не задан транспорт чьё имя совпало, доставка задерживается.

.. index::
   pair: appendfile; file_must_exist

===================  ===============  =============  ==============
**file_must_exist**  Use: appendfile  Type: boolean  Default: false
===================  ===============  =============  ==============

Если этот параметр истинна, файл заданный параметром **file** должен существовать. Если это не так, происходит временная ошибка. Если этот параметр не задан, в случае отсутствия файла он создаётся.

.. index::
   pair: appendfile; lock_fcntl_timeout

======================  ===============  ==========  ===========
**lock_fcntl_timeout**  Use: appendfile  Type: time  Default: 0s
======================  ===============  ==========  ===========

По умолчанию, транспорт **appendfile** использует неблокирующие вызовы *fcntl()*, при блокировке открытого файла почтового ящика. Если вызов неудачен, процесс доставки засыпает на **lock_interval**, и пробует снова, до времени **lock_retries**. Неблокирующие вызовы используются так, чтобы файл не оставлялся открытым в ожидании блокировки; причина этого заключается в желании сделать это безопасным насколько возможно, для доставок через NFS, в случае, когда процессы могли бы обращаться к почтовому ящику NFS без использования файла блокировки. Этого не должно быть, но недоразумения, и, следовательно, просчёты конфигурации возможны.

На загруженных системах, однако, производительность неблокирующей блокировки не столь хороша, как использование блокирующей блокировки с таймаутом. В этом случае, ожидание делается в системном вызове, и процесс доставки Exim`a овладевает блокировкой и может обработать, как только предыдущий держатель блокировки снимет её.

Если **lock_fcntl_timeout** установлена в ненулевое время, блокирование блокируется, с использованием этого таймаута. Всё ещё может быть некоторое повторение: максимальное число повторений

::

    (lock_retries * lock_interval) / lock_fcntl_timeout

округляется к следующему целому числу. Другими словами, полное время в течение которого **appendfile** пробует получить блокировку - примерно тоже самое, если **lock_fcntl_timeout** не установлена слишком большой.

Вы должны рассмотреть установку этого параметра, если вы получаете много отсроченных локальных доставок из-за ошибок вида

::

    failed to lock mailbox /some/file (fcntl)

.. index::
   pair: appendfile; lock_flock_timeout

======================  ===============  ==========  ===========
**lock_flock_timeout**  Use: appendfile  Type: time  Default: 0s
======================  ===============  ==========  ===========

Этот таймаут применяется к блокировке файла, когда используется *flock()* (смотрите **use_flock**); таймаут работает в манере, похожей на **lock_fcntl_timeout**.

.. index::
   pair: appendfile; lock_interval

=================  ===============  ==========  ===========
**lock_interval**  Use: appendfile  Type: time  Default: 3s
=================  ===============  ==========  ===========

Этот параметр определяет время ожидания между попытками блокировки файла. Смотрите ниже, для дополнительных деталей о блокировке.

.. index::
   pair: appendfile; lock_retries

================  ===============  =============  ===========
**lock_retries**  Use: appendfile  Type: integer  Default: 10
================  ===============  =============  ===========

Этот параметр определяет максимальное число попыток блокировки файла. Значение нуля обрабатывается как единица. Смотрите ниже, для дополнительных деталей о блокировке.

.. index::
   pair: appendfile; lockfile_mode

=================  ===============  ===================  =============
**lockfile_mode**  Use: appendfile  Type: octal integer  Default: 0600
=================  ===============  ===================  =============

Этот параметр определяет режим создаваемого файла блокировки, когда используется файл блокировки (смотрите параметры **use_lockfile** и **use_mbx_lock**)

.. index::
   pair: appendfile; lockfile_timeout

====================  ===============  ==========  ============
**lockfile_timeout**  Use: appendfile  Type: time  Default: 30m
====================  ===============  ==========  ============

Когда используется файл блокировки (смотрите параметр **use_lockfile**), если файл блокировки уже существует, и он старше этого значения, предполагается, что он был случайно оставлен, и Exim пытается его удалить.

.. index::
   pair: appendfile; mailbox_filecount

=====================  ===============  =============  ==============
**mailbox_filecount**  Use: appendfile  Type: string†  Default: unset
=====================  ===============  =============  ==============

Если этот параметр установлен, он раскрывается, и результат берётся как текущее число файлов в почтовом ящике. Это должно быть десятичное число, необязательно сопровождаемое K или M. Этим предоставляется способ получить информацию из внешнего источника, обслуживающего данные.

.. index::
   pair: appendfile; mailbox_size

================  ===============  =============  ==============
**mailbox_size**  Use: appendfile  Type: string†  Default: unset
================  ===============  =============  ==============

Если этот параметр задан, он раскрывается, и результат берётся как текущий размер почтового ящика. Это должно быть десятичное число, необязательно сопровождаемое K или M. Этим предоставляется способ получить информацию из внешнего источника, обслуживающего данные. Это, вероятно, будет полезным для доставок **maildir**, где, в вычислительном отношении, дорого вычислить размер почтового ящика.

.. index::
   pair: appendfile; maildir_format

==================  ===============  =============  ==============
**maildir_format**  Use: appendfile  Type: boolean  Default: false
==================  ===============  =============  ==============

Если этот параметр задан вместе с параметром **directory**, доставка в новый файл, в формате “maildir” используемом другими почтовыми программами. Когда транспорт активизирован непосредственно от маршрутизатора **redirect** (например, транспорт **address_file** в конфигурации по умолчанию), установка **maildir_format** вызывает обработку пути переданного из маршрутизатора как каталога, вне зависимости, завершается, или нет, он на “/”. Этот параметр доступен лишь если в *Local/Makefile* присутствует SUPPORT_MAILDIR. Для получения дополнительных деталей, смотрите раздел :ref:`26.5 <ch26_05>`.

.. index::
   pair: appendfile; maildir_quota_directory_regex

=================================  ===============  ============  ==================
**maildir_quota_directory_regex**  Use: appendfile  Type: string  Default: See below
=================================  ===============  ============  ==================

Этот параметр уместен лишь есл установлен **maildir_use_size_file**. Он определяет регулярное выражение, для определения директорий, относительно директории квоты (смотрите **quota_directory**), которая должна быть включена в подсчёт квоты. Значение по умолчанию::

    maildir_quota_directory_regex = ^(?:cur|new|\..*)$

Этим включаются директории *cur* и *new*, и любые директории “maildir++” (директории, чьи имена начинаются с точки). Если вы хотите исключить из подсчёта директорию *Trash* (как делают некоторые сайты), вы должны изменить эту установку на 

::

    maildir_quota_directory_regex = ^(?:cur|new|\.(?!Trash).*)$

Это использует отрицательное предвидение в регулярном выражении, для исключения директории с именем *.Trash*.  Когда директория исключена из подсчёта квоты, обработка квоты пропускается для любых сообщений доставляемых в этот каталог.

.. index::
   pair: appendfile; maildir_retries

===================  ===============  =============  ===========
**maildir_retries**  Use: appendfile  Type: integer  Default: 10
===================  ===============  =============  ===========

Этот параметр определяет число повторов при записи файла в формате “maildir”. Смотрите ниже, раздел :ref:`26.5 <ch26_05>`.

.. index::
   pair: appendfile; maildir_tag

===============  ===============  =============  ==============
**maildir_tag**  Use: appendfile  Type: string†  Default: unset
===============  ===============  =============  ==============

Этот параметр применяется лишь к доставкам в формате “maildir”, и он описана ниже, в разделе :ref:`26.5 <ch26_05>`.

.. index::
   pair: appendfile; maildir_use_size_file

=========================  ===============  =============  ==============
**maildir_use_size_file**  Use: appendfile  Type: boolean  Default: false
=========================  ===============  =============  ==============

Установка этого параметра в истину включает поддержку файлов *maildirsize*. Exim создаёт файлы *maildirsize* в “maildir”, если они не существуют, беря квоту из параметра **quota** транспорта. Если квота не задана - значение равно нулю. Смотрите **maildir_quota_directory_regex**, выше и раздел :ref:`26.5 <ch26_05>` для получения дополнительных деталей.

.. index::
   pair: appendfile; maildirfolder_create_regex

==============================  ===============  ============  ==============
**maildirfolder_create_regex**  Use: appendfile  Type: string  Default: unset
==============================  ===============  ============  ==============

Значение этого параметра - регулярное выражение. Если оно не задано, параметр не имеет никакого эффекта. Иначе, до доставки “maildir”, выражение сравнивается с именем директории “maildir”, т.е. директории содержащей поддиректории *new* и *tmp*, которые будут использоваться для доставки. Если есть соответствие, Exim проверяет существование файла с именем *maildirfolder* в директории, и создаёт его, если он не существует. Для получения дополнительных деталей, смотрите раздел :ref:`26.5 <ch26_05>`.

.. index::
   pair: appendfile; mailstore_format

====================  ===============  =============  ==============
**mailstore_format**  Use: appendfile  Type: boolean  Default: false
====================  ===============  =============  ==============

Если этот параметр установлен вместе с параметром **directory**, доставка осуществляется в два новых файла, в формате “mailstore”. Этот параметр доступен лишь в случае, если при сборке Exim`a в *Local/Makefile* был параметр SUPPORT_MAILSTORE. Для получения дополнительных деталей, смотрите раздел :ref:`26.4 <ch26_04>`.

.. index::
   pair: appendfile; mailstore_prefix

====================  ===============  =============  ==============
**mailstore_prefix**  Use: appendfile  Type: string†  Default: unset
====================  ===============  =============  ==============

Этот параметр применяется только к доставкам в формате “mailstore”, и он описана ниже, в разделе :ref:`26.4 <ch26_04>`.

.. index::
   pair: appendfile; mailstore_suffix

====================  ===============  =============  ==============
**mailstore_suffix**  Use: appendfile  Type: string†  Default: unset
====================  ===============  =============  ==============

Этот параметр применяется только к доставкам в формате “mailstore”, и он описана ниже, в разделе :ref:`26.4 <ch26_04>`.

.. index::
   pair: appendfile; mbx_format

==============  ===============  =============  ==============
**mbx_format**  Use: appendfile  Type: boolean  Default: false
==============  ===============  =============  ==============

Этот параметр доступен лишь в случае, если при сборке Exim`a в *Local/Makefile* был параметр SUPPORT_MBX. Если параметр **mbx_format** установлен вместе с параметром **file**, сообщение добавляется к почтовому ящику в формате MBX, вместо формата традиционного UNIX. Этот формат поддерживается Pine4, и связан с его POP3 и IMAP даемонами путём используемой всеми ими “c-client” библиотеки.

.. note:: Параметры **message_prefix** и **message_suffix** не меняются автоматически, при использовании **mbx_format**. Обычно, при использовании формата MBX, они должны устанавливаться пустыми, таким образом, этот параметр почти всегда появляется в такой комбинации:

  ::

      mbx_format = true
      message_prefix =
      message_suffix =

   
Если в конфигурации не упомянута ни один из параметров блокировки, предполагается **use_mbx_lock**, и другие параметры блокировки, по умолчанию, ложны. С **mbx_format** возможно определить другие виды блокировок, но **use_fcntl_lock** и **use_mbx_lock** являются взаимоисключающими. Блокировка MBX взаимодействует с “c-client”, предоставляя общий [#]_ доступ к почтовому ящику. Она не должна использоваться, если любая иная программа, не использующая эту форму блокировки, собирается обращаться к этому почтовому ящику, или если почтовый ящик находится на файловой системе смонтированной по NFS, поскольку она работает лишь когда к почтовому ящику обращаются с одного хоста.

Если вы устанавливаете **use_fcntl_lock** с почтовыми ящиками в формате MBX, вы не можете использовать стандартную версию “c-client”, поскольку пока есть открытый ящик (это бывает при сессии Pine или IMAP), Exim не в состоянии добавить к нему сообщение.

.. index::
   pair: appendfile; message_prefix

==================  ===============  =============  ==================
**message_prefix**  Use: appendfile  Type: string†  Default: see below
==================  ===============  =============  ==================

Строка заданная в этом пункте раскрывается и выводится в начале каждого сообщения. По умолчанию, она не задана, если не определен параметр **file**, и не установлена **use_bsmtp**, когда она::

    message_prefix = "From ${if def:return_path{$return_path}\
                            {MAILER-DAEMON}} $tod_bsdinbox\n"

.. note:: Если вы устанавливаете параметр **use_crlf** в истину, вы должны изменить любые упоминания “\n” на “\r\n” в **message_prefix**.

.. index::
   pair: appendfile; message_suffix

==================  ===============  =============  ==================
**message_suffix**  Use: appendfile  Type: string†  Default: see below
==================  ===============  =============  ==================

Строка заданная в этом пункте раскрывается и выводится в конце каждого сообщения. По умолчанию, она не задана, если не определен параметр **file**, и не установлен **use_bsmtp**, в этих случаях она состоит из единственного символа - символа новой строки. Суффикс может быть подавлен путём установки::

    message_suffix =

.. note:: Если вы устанавливаете параметр **use_crlf** в истину, вы должны изменить любые упоминания “\n” на “\r\n” в **message_suffix**.

.. index::
   pair: appendfile; mode

========  ===============  ===================  =============
**mode**  Use: appendfile  Type: octal integer  Default: 0600
========  ===============  ===================  =============

Если создаётся файл вывода - на него устанавливается такой режим. Если он существует и на него установлены более широкие разрешения, они уменьшаются до указанного в этом параметре. Если на него установлены более жёсткие ограничения, то происходит ошибка, если параметр **mode_fail_narrower** истинна. Однако, если доставка - результат команды **save** в файле фильтра, задающей особый режим, режим выходного файла всегда принудительно приводится к этому значению, и этот параметр игнорируется.

.. index::
   pair: appendfile; mode_fail_narrower

======================  ===============  =============  =============
**mode_fail_narrower**  Use: appendfile  Type: boolean  Default: true
======================  ===============  =============  =============

Этот параметр применяется в случае, когда существующий файл почтового ящика имеет более строгие ограничения чем заданные параметром **mode**. Если параметр **mode_fail_narrower** истинна - доставка задерживается (“mailbox has the wrong mode”); иначе - Exim продолжает попытки доставки, используя существующий режим файла.

.. index::
   pair: appendfile; notify_comsat

=================  ===============  =============  ==============
**notify_comsat**  Use: appendfile  Type: boolean  Default: false
=================  ===============  =============  ==============

Если этот параметр истинна, даемон *comsat* уведомляется после каждой успешной доставки в пользовательский почтовый ящик. Это даемон, который уведомляет залогиненых пользователей о пришедшей почте.

.. index::
   pair: appendfile; quota

=========  ===============  =============  ==============
**quota**  Use: appendfile  Type: string†  Default: unset
=========  ===============  =============  ==============

Этот параметр налагает ограничения на размер файла, к которому Exim добавляет сообщение, или на полный размер используемый деревом директорий, когда установлен параметр **directory**. В последнем случае, вычисление используемого места дорого стоит, поскольку должны быть индивидуально осмотрены и просуммированы все файлы в директории (и любых поддиректориях). (Смотрите **quota_size_regex** и **maildir_use_size_file** для способов избежать этого в окружении где пользователи не имеют shell-доступа к своим почтовым ящикам.)
   
Нет блокировки от двух одновременных доставок в многофайловый почтовый ящик, и в этом случае возможно превышение квоты. Для однофайловых почтовых ящиков, разумеется, блокировка - необходимость.


Размер файла берётся как его используемое значение. Из-за эффектов блокировки, оно может быть намного меньше дискового пространства, фактически используемого файлом. Если складываются размеры большого числа файлов, эффект округления может стать весьма заметным, особенно на системах использующих большой размер блока. Однако, кажется лучше придерживаться используемого числа, поскольку оно - очевидное значение, наиболее легко понимаемое пользователями.

Значение параметра раскрывается, и должно быть числовым значением (разрешена десятичная точка), необязательно сопровождаемая одной из букв K, M, или G - для килобайт, мегабайт, или гигабайт. Если Exim работает на системе с поддержкой больших файлов (FreeBSD и Linux имеют такую поддержку), могут быть обработаны ящики более 2G размером.

.. note:: Значение нуля интерпретируется как “нет квоты”.

Раскрытие происходит когда Exim работает как root, до того, как он для доставки меняет uid. Это означает, что для содержания квоты, которая ищется в раскрытии можно использовать файлы, которые недоступны конечному пользователю. При неудаче доставки по причине превышения квоты, ошибка обрабатывается как ошибка системной квоты.

По умолчанию, проверка квоты Exim`ом подражает системным квотам, и ограничивает почтовый ящик заданным максимальным размером, хотя значение не является точным до последнего байта, из-за строк разделителей, и дополнительных заголовков, которые могут добавляться при доставке сообщения. Когда почтовый ящик почти полный, большие сообщения могут быть отклонены, а маленькие приняты, поскольку размер текущего сообщения добавляется к квоте, при проверке. Это поведение может быть изменено путём установки **quota_is_inclusive** в ложь. Когда это сделано, проверка на превышение квоты не включает текущее сообщение. Таким образом, доставки продолжаются до превышения квоты; после этого никакие последующие сообщения не доставляются. Также смотрите параметр **quota_warn_threshold**.

.. index::
   pair: appendfile; quota_directory

===================  ===============  =============  ==============
**quota_directory**  Use: appendfile  Type: string†  Default: unset
===================  ===============  =============  ==============

Этот параметр задаёт директорию для проверки квоты при доставке в отдельные файлы. ПО умолчанию - это директория для доставки, или, если в “maildir” директории существует файл с именем *maildirfolder*, родительский каталог, по отношению к директории для доставки.

.. index::
   pair: appendfile; quota_filecount

===================  ===============  =============  ==========
**quota_filecount**  Use: appendfile  Type: string†  Default: 0
===================  ===============  =============  ==========

Этот параметр применяется когда установлен параметр **directory**. Он ограничивает общее число файлов в директории (сравните с лимитом на иноды в системных квотах). Он может использоваться, лишь когда установлен параметр **quota**. Значение раскрывается; ошибка доставки вызывает задержку доставки. Значение нуля интерпретируется как “нет квоты”.

.. index::
   pair: appendfile; quota_is_inclusive

======================  ===============  =============  =============
**quota_is_inclusive**  Use: appendfile  Type: boolean  Default: true
======================  ===============  =============  =============

Смотрите выше, параметр **quota**.

.. index::
   pair: appendfile; quota_size_regex

====================  ===============  ============  ==============
**quota_size_regex**  Use: appendfile  Type: string  Default: unset
====================  ===============  ============  ==============

Этот параметр применяется когда используется один из режимов доставки, записывающий отдельный файл для каждого сообщения. Когда Exim хочет найти размер одного из этих файлов, для проверки квоты, он вначале проверяет **quota_size_regex**. Если она установлена в регулярное выражение, которое совпадает с именем файла, и является одной строкой, строка интерпретируется как представление размера файла. Значение **quota_size_regex** не раскрывается.

Эта особенность полезна лишь когда пользователи не имеют shell-доступа к своим почтовым ящикам - иначе они могли бы обойти квоту простым переименованием файлов. Это средство может использоваться для “maildir” доставок, путём установки “maildir_tag” для добавления длинны файла к имени файла. Например::

    maildir_tag = ,S=$message_size
    quota_size_regex = ,S=(\d+)

Альтернативой $message_size является $message_linecount, которая содержит число линий в сообщений.

Регулярное выражение не должно предполагать что размер сообщения - в конце имени файла (даже при том, что её там помещает “maildir_tag”), поскольку MUA обрабатывающие “maildir” иногда добавляют иную информацию в конец имени сообщения.

.. index::
   pair: appendfile; quota_warn_message

======================  ===============  =============  ==================
**quota_warn_message**  Use: appendfile  Type: string†  Default: see below
======================  ===============  =============  ==================

Смотрите ниже, при использование этого параметра. Если этот параметр не задан, когда установлен **quota_warn_threshold**, значение по умолчанию будет::

    quota_warn_message = "\
      To: $local_part@$domain\n\
      Subject: Your mailbox\n\n\
      This message is automatically created \
      by mail delivery software.\n\n\
      The size of your mailbox has exceeded \
      a warning threshold that is\n\
      set by the system administrator.\n"

.. index::
   pair: appendfile; quota_warn_threshold

========================  ===============  =============  ==========
**quota_warn_threshold**  Use: appendfile  Type: string†  Default: 0
========================  ===============  =============  ==========

Этот параметр раскрывается точно таким же образом, как и **quota** (смотрите выше). Если результирующее значение больше нуля, и доставка сообщения приводит к размеру файла или общему размеру дерева директорий более данного порога, посылается предупреждающее сообщение. Если, также, установлена **quota**, порог может быть определён как процент от её значения, путём сопровождения значения символом процента. Например::

    quota = 10M
    quota_warn_threshold = 75%

Если **quota** не задана, установка **quota_warn_threshold** заканчивающаяся символом процента - игнорируется.

Само предупреждающее сообщение определяется путём параметра **quota_warn_message**, и оно должно начинаться со строки заголовка “To:”, содержащей получателя (получателей) предупреждающего сообщения. Они не обязательно должны включать отправителей оригинального сообщения. Также, обычно, должна предоставляться строка “Subject:”. Вы можете включить любые другие строки заголовков, которые вам необходимы. Если вы не включите строку “From:”, то значение по умолчанию будет::

    From: Mail Delivery System <mailer-daemon@$qualify_domain_sender>

Если вы предоставляете строку “Reply-To:”, он замещает глобальный параметр **errors_reply_to**.

Параметр **quota** не нуждается в приведении в порядок, для использования этого параметра; они независимы друг от друга, кроме случаев, когда порог определён как процент.

.. index::
   pair: appendfile; use_bsmtp

=============  ===============  =============  ==============
**use_bsmtp**  Use: appendfile  Type: boolean  Default: false
=============  ===============  =============  ==============

Если этот параметр установлен в истину, **appendfile** пишет сообщения в формате “пакетного SMTP”, с отправителем конверта и получателем(получателями) включёнными в SMTP-команды. Если вы хотите включить начальную команду HELO в эти сообщения, вы можете это сделать путём установки параметра **message_prefix**. Для получения дополнительных деталей о пакетном SMTP, смотрите раздел :ref:`45.10 <ch45_10>`.

.. index::
   pair: appendfile; use_crlf

============  ===============  =============  ==============
**use_crlf**  Use: appendfile  Type: boolean  Default: false
============  ===============  =============  ==============

Этот параметр заставляет строки заканчиваться двухсимвольной CR LF последовательностью (возврат каретки, перевод строки), вместо одного символа перевода строки. В случае пакетного SMTP, записанная в файл последовательность байт, - точное изображение того, что произвело бы отключение реального SMTP-соединения.

.. warning:: Содержимое параметров **message_prefix** и **message_suffix** (которые используется для подстановки в традиционном “From ” и разделителей пустых строк в почтовых ящиках типа Berkeley) пишется дословно, таким образом, они должны содержать свои символы возврата каретки, если они необходимы. В случаях, когда эти параметры имеют непустые значения по умолчанию, значение завершается единственным переводом строки, таким образом, они должны быть изменены, чтобы заканчиваться на “\r\n”, если установлен параметр **use_crlf**.

.. index::
   pair: appendfile; use_fcntl_lock

==================  ===============  =============  ==================
**use_fcntl_lock**  Use: appendfile  Type: boolean  Default: see below
==================  ===============  =============  ==================

Этот параметр контролирует использование функции *fcntl()*, для блокировки файла в целях исключительного использования, при добавлении сообщения. По умолчанию, она установлена, когда не установлена **use_flock_lock**. Иначе, она должна быть выключена, лишь если вы знаете что все ваши MUA используют блокировку путём файла блокировки. Когда не установлены оба параметра, **use_fcntl_lock** и **use_flock_lock**, параметр **use_lockfile** должен быть задан.

.. index::
   pair: appendfile; use_flock_lock

==================  ===============  =============  ==============
**use_flock_lock**  Use: appendfile  Type: boolean  Default: false
==================  ===============  =============  ==============

Этот параметр предоставлен для поддержки блокировки файлов с использованием *flock()*, в тех немногих ситуациях, когда это необходимо. Самые современные операционные системы поддерживают блокировки *fcntl()* и *lockf()*, и эти две функции взаимодействуют друг с другом. По умолчанию, Exim использует блокировку *fcntl()*.

Этот параметр требуется лишь если вы используете операционную систему где *lockf()* используется программами обращающимися к почтовым ящикам (обычно - MUA), и где *flock()* некорректно взаимодействует с *fcntl()*. Если вы хотите, то можете одновременно использовать обе блокировки *fcntl()* и *flock()*.

Не все операционные системы предоставляют *flock()*. Некоторые версии Solaris не имеют её (и некоторые, я думаю, предоставляют не совсем правильные версии, собранные на верху *lockf()*). Если операционная система не имеет *flock()*, Exim будет собран без способности её использовать, и любые попытки сделать это приведут к конфигурационной ошибке.

.. warning:: Блокировка *flock()* не работает на NFS файлах (только если *flock()* не отображается (mapped) на *fcntl()* с помощью операционной системы).

.. index::
   pair: appendfile; use_lockfile

================  ===============  =============  ==================
**use_lockfile**  Use: appendfile  Type: boolean  Default: see below
================  ===============  =============  ==================

Если этот параметр выключен, Exim не пытается создать файл блокировки при добавлении к файлу почтового ящика. В этой ситуации, единственная блокировка - *fcntl()*. Вы должны отключать **use_lockfile** лишь в случае, если вы абсолютно уверены, что любые MUA, которые когда-либо будут просматривать почтовые ящики пользователей, используют *fcntl()* вместо блокировочного файла и тогда, когда вы не передаёт через NFS более чем от одного хоста.

Для безопасного добавления к файлам NFS более чем от одного хоста, необходимо снять блокировку до открытия файла, и блокировочный файл достигает этого. Иначе, даже с блокировкой *fcntl()*, есть риск повреждения файла.

Параметр **use_lockfile** установлен по умолчанию, если не задан **use_mbx_lock**. Не возможно выключить оба параметра - **use_lockfile** и **use_fcntl_lock**, кроме случаев, когда установлен **mbx_format**.

.. index::
   pair: appendfile; use_mbx_lock

================  ===============  =============  ==================
**use_mbx_lock**  Use: appendfile  Type: boolean  Default: see below
================  ===============  =============  ==================

Этот параметр доступен лишь когда Exim скомпилирован с установленной SUPPORT_MBX в *Local/Makefile*. Установка параметра определяет, что используются специальные правила блокировки MBX. По умолчанию, он установлен, если установлен **mbx_format**, и ни одного параметра блокировки нет в конфигурации. Правила блокировки - такие же, как используются библиотекой “c-client”, лежащей в основе даемонов Pine, IMAP4 и POP, которые идут вместе с ней (ниже, смотрите обсуждение). Правила разрешают общий доступ к почтовому ящику. Однако, этот вид блокировки не работает, когда почтовый ящик примонтирован по NFS.

Вы можете установить **use_mbx_lock** с одним или обеими параметрами **use_fcntl_lock** **use_flock_lock** для контроля, какая блокировка используется в осуществлении правил блокировки MBX. Значение по умолчанию использует *fcntl()* если **use_mbx_lock** установлен без **use_fcntl_lock** или **use_flock_lock**.


.. _ch26_03:

Операционные детали при добавления
----------------------------------

До добавления к файлу, производятся следующие подготовительные операции:

* Если имя файла - */dev/null*, не предпринимается никакого действия, и выдаётся успешное завершение.

* Если какие-либо директории на пути файла отсутствуют, Exim создаёт их, если установлен параметр **create_directory**.  Режим созданных директорий задаётся параметром **directory_mode**.

* Если установлена **file_format**, проверяется формат существующего файла. Если она указывает, что должен использоваться иной транспорт, управление передаётся этому транспорту.

* Если установлена **use_lockfile**, создаётся файл блокировки для способа, который будет надёжно работать по NFS, следующим образом:

  1. Создание “сцепленного файла” чьё имя - имя файла блокировки с текущим именем, первичным именем хоста, и добавленным идентификатором процесса, путём открытия для записи нового файла. Если происходит неудача с ошибкой доступа, доставка задерживается.
  2. Закрытие “сцепленного файла”, жёсткая ликовка его на имя файла блокировки.
  3. Если вызов *link()* успешен, создание файла блокировки успешно. Удаление имени сцепленного файла.
  4. Иначе, используется *stat()* для получения информации о сцепленном файле, и, затем, удаляется ссылка на имя сцепленного файла. Если число ссылок - ровно две, создание файла блокировки спешно, но иногда (например, падение и рестарт NFS-сервера) вызывает несообщение этого факта вызову *link()*.
  5. Если создание блокировочного файла неудачно, ждётся **lock_interval** и снова пробуется, вплоть до времени **lock_retries**. Однако, т.к. любая программа пишущая в почтовый ящик должна завершить свою задачу очень быстро,это разумный таймаут старых блокировочных файлов, которые, обычно, результат сбоев пользовательского агента и системы. Если существующий файл блокировки старее чем **lockfile_timeout**, Exim пытается удалить его до новой попытки.

* К *lstat()* производится запрос, для обнаружения, существует ли главный файл, и если это так, каковы его характеристики. Если *lstat()* - неудачна для по какой-либо причине, кроме несуществования, доставка задерживается.

* Если файл действительно существует, и является символьной ссылкой, доставка задерживается, если не задан параметр **allow_symlink**, в случае чего проверяется владелец ссылки, и, затем, вызывается *stat()*, для нахождения реального файла, подвергаемого последующим проверкам. Проверка владельца вышестоящей ссылки предотвращает создание пользователем ссылки на чужой почтовый ящик в “липкой” директории, разрешение симлинков, в этом случае, - не самая хорошая идея. Если существует цепочка символьных ссылок, промежуточные не проверяются.

* Если файл реально существует, но он не регулярный файл, или владелец и группа файла (если группа проверяется - смотрите выше, параметр **check_group**) отличаются от пользователя и группы под которыми производится доставка, доставка задерживается.

* Если разрешения файла более широкие, чем указанные, - они уменьшаются. Если они недостаточны - доставка задерживается, если параметр **mode_fail_narrower** не установлена в ложь, в случае чего пробуется доставка с существующими разрешениями.

* Сохраняется номер иноды файла, и файл открывается для добавления. Если это неудачно, по причине что файл исчез, **appendfile** ведёт себя так, как будто его не существовало (смотрите ниже). Для любых других ошибок - доставка задерживается.

* Если файл открыт успешно, проверяется, что не изменился его номер иноды, что это - всё ещё регулярный файл, и что не изменились его владелец и права. Если что-то не так - доставка задерживается, и сообщение замораживается.

* Если файл изначально не существовал, доставка задерживается, если установлен параметр **file_must_exist**. Иначе, если установлен параметр **create_file**, проверяется что файл создан в разрешённом каталоге, и, затем, открывается для записи новый файл, с параметрами O_EXCL и O_CREAT, кроме случаев, когда это производится с символической ссылкой (должен быть установлен параметр **allow_symlink**). В этом случае, который может произойти если ссылка указывает на несуществующий файл, файл открывается для записи используя O_CREAT, но не O_EXCL, поскольку это мешает связи с ссылкой.

* Если открытие неудачно, поскольку файл существует, производятся проверки данных выше, для существующих файлов. Однако, для избежания петель в ситуациях, когда файл непрерывно создаётся и удаляется, петля существует/не существует разрывается после 10 повторов, и сообщение замораживается.

* Если открытие неудачно по любой другой причине - доставка задерживается.

* Как только файл открыт, если истинны параметры **use_fcntl_lock** и **use_flock_lock**, он блокируется, используя *fcntl()* или *flock()* или обе. Если **use_mbx_lock** - ложна, в каждом случае запрашивается эксклюзивная блокировка. Однако, если **use_mbx_lock** - истинна, Exim забирает общую блокировку открытого файла, и эксклюзивно блокирует файл с именем

  ::

      /tmp/.<device-number>.<inode-number>
      
  используя устройство и номер иноды открытого файла почтового ящика, в соответствии с правилами блокировки MBX. Этот файл создаётся с режимом, определённым путём параметра **lockfile_mode**.
  
* Если Exim не в состоянии заблокировать файл, есть два возможных действия, в зависимости от значения таймаута блокировки. Оно получается из **lock_fcntl_timeout** и **lock_flock_timeout**, соответственно.

* Если значение таймаута - ноль, файл закрывается, Exim ждёт **lock_interval**, и, затем, возвращается и повторно открывает файл, как описано выше, и снова пробует ео заблокировать. Это случается до времени **lock_retries**, после которого доставка задерживается.

* Если значение таймаута более нуля, блокировка вызывает *fcntl()* или *flock()*, которая используются (с данным таймаутом), таким образом, уже будет некоторое значение таймаута, путём ошибок блокировки. Однако, Exim не прекращает немедленно. Он повторяет до времени (округлённого)

  ::

      (lock_retries * lock_interval) / <timeout>
      
В конце доставки, Exim закрывает файл (освобождая блокировки *fcntl()* и/или *flock()*), и после этого удаляет, если он существует, файл блокировки.

.. _ch26_04:

Операционные детали для доставки в новый файл
---------------------------------------------

Когда параметр **directory** установлена вместо **file**, каждое сообщение доставляется в недавно созданный файл, или установленные файлы. Когда **appendfile** активирован непосредственно из маршрутизатора **redirect**, то обычно ни **file**, ни **directory** не устанавливаются, поскольку путь для доставки предоставляется маршрутизатором. (Смотрите, например, транспорт **address_file**, в конфигурации по умолчанию.) В этом случае, доставка осуществляется в новый файл, если имя пути завершается на “/”, или установлен параметр **maildir_format** или **mailstore_format**.

При записи сообщения в новый файл блокировка не требуется, следовательно, различные параметры блокировки транспорта - игнорируются. Строка “From”, которая по умолчанию, разделяет сообщения в одном файле, обычно не требуется, ни экранирование строк сообщения начинающихся с “From”, и нет необходимости обеспечивать новую строку в конце каждого сообщения. Следовательно, значения по умолчанию **check_string**, **message_prefix** и **message_suffix** - все незаданы, когда установлена любой из параметров **directory**, **maildir_format** или **mailstore_format**.

Если Exim должен проверять установку **quota**, он складывает размеры всех файлов в директории по умолчанию для доставки. Однако, вы можете задать иную директорию, путём установки **quota_directory**. Также, для доставок **maildir** (смотрите ниже), соблюдается соглашение *maildirfolder*.

Есть три различных пути, которыми может быть сделана доставка в индивидуальные файлы, контролируемые параметрами настройки параметров **maildir_format** и **mailstore_format**. Отметьте, что код для поддержки форматов **maildir** или **mailstore** не включен в исполняемый файл, если SUPPORT_MAILDIR, или, соответственно, SUPPORT_MAILSTORE не установлены в *Local/Makefile*.

Во всех трёх случаях, делается попытка создать директорию и все необходимые субдиректории, если они не существуют, при условии что установлен параметр **create_directory** (по умолчанию - установлен). Расположение созданного каталога может быть ограничено установкой **create_file**. Режим созданной директории даётся параметром **directory_mode**. Если создание неудачно, или если параметр **create_directory** не установлен, когда требуется создание, доставка задерживается.

.. _ch26_05:

Доставка **maildir**
--------------------

Если истинен параметр **maildir_format**, Exim доставляет каждое сообщение путём записи его в файл, чьё имя - *tmp/<stime>.H<mtime>P<pid>.<host>*, в директории, определённой параметром **directory** (“директория доставки”). Если доставка успешна, файл переименовывается внутрь поддиректории *new*.

В имени файла, *<stime>* - текущее время дня, в секундах, и *<mtime>* - часть микросекунд времени. После **maildir** доставки, Exim проверяет, что часы дневного времени ушли дальше по крайней мере на микросекунду, перед завершением процесса доставки. Это гарантирует уникальность имени файла. Однако, предусмотрительно, Exim вызывает *stat()* для файла, до его открытия. Если даётся какой угодно ответ кроме ENOENT (не существует), Exim ждёт две секунды, и пробует снова, вплоть до времени **maildir_retries**.

До того, как Exim выполнит **maildir**-доставку, он обеспечивает что директории с именами *new*, *cur* и *tmp* существуют в директории доставки. Если они не существуют, Exim пробует создать их, и другие предстоящие директории в пути, подчиняясь параметрам **create_directory** и **create_file**. Если задан параметр **maildirfolder_create_regex**, и её регулярное выражение содержит  совпадение с директорией доставки, Exim, также, гарантирует, что в директории доставки существует файл *maildirfolder*. Если отсутствующая директория, или файл *maildirfolder* не могут быть созданы, доставка задерживается.

Эти особенности позволяют использовать Exim для создания всех необходимых файлов и каталогов в почтовом ящике, включая субдиректории для папок “maildir++”. Рассмотрите этот пример::

    maildir_format = true
    directory = /var/mail/$local_part\
      ${if eq{$local_part_suffix}{}{}\
      {/.${substr_1:$local_part_suffix}}}
    maildirfolder_create_regex = /\.[^/]+$
    
Если пуста $local_part_suffix (нет суффикса для локальной части), доставка происходит в вышележащую “maildir”, с именем типа */var/mail/pimbo* (для пользователя с именем “pimbo”). Регулярное выражение в **maildirfolder_create_regex** не совпадает с этим именем, таким образом, Exim не будет искать или создавать */var/mail/pimbo/maildirfolder*, хотя он, в случае необходимости, создаст */var/mail/pimbo/{cur,new,tmp}*.

Однако, если $local_part_suffix содержит, например, ``-eximusers``, доставка происходит в папку “maildir++” */var/mail/pimbo/.eximusers*, которая не совпадает с **maildirfolder_create_regex**. В этом случае, Exim создаст */var/mail/pimbo/.eximusers/maildirfolder*, также как и три директории “maildir” - */var/mail/pimbo/.eximusers/{cur,new,tmp}*.

.. warning:: При установке **maildirfolder_create_regex** позаботьтесь о том, чтобы она, по неосторожности, не совпадала с вышестоящей директорией “maildir”, поскольку файл *maildirfolder* на вышестоящем уровне полностью нарушил бы подсчёт квоты.

Если Exim обязан проверять установку **quota** до “maildir” доставки, и **quota_directory** не установлена, он ищет файл с именем *maildirfolder* в “maildir”-директории (рядом *new*, *cur*, *tmp*). Если он существует, Exim предполагает, что директория - директория папок “maildir++”, которая одним уровнем ниже верхнего уровня пользовательской директории почтового ящика. Это заставляет его начать подсчёт используемого места с родительского каталога, вместо текущей директории.

Проблема, при доставке в многофайловый почтовый ящик, состоит в том, что в вычислительном отношении дорого подсчитать размер почтового ящика, для проверки квоты. Были предприняты различные подходы для уменьшения необходимой работы. Следующие два раздела описывают два из них. Третья альтернатива заключается в использовании какого-то внешнего процесса для обслуживания данных о размере, и использовании раскрытия параметра **mailbox_size** как способа импортировать эти данные в Exim.


.. _ch26_06:

Использование тэгов для записи размера сообщений
------------------------------------------------

Если установлена **maildir_tag**, строка раскрывается для каждой доставки. Когда “maildir”-файл переименовывается в субдиректорию *new*, к его имени добавляется тэг. Однако, если добавляемый тэг берёт длину имени с которой проверочный вызов *stat()* неудачен по причине ENAMETOOLONG, тег удаляется, и “maildir”-файл создаётся без тега.

Теги могут использоваться для кодирования размеров файлов в их именах; для примера, смотрите выше, параметр **quota_size_regex**. Раскрытие **maildir_tag** происходит после записи сообщения. Значение переменной $message_size устанавливается в число фактически записанных байт. Если раскрытие принудительно неудачно, тэг игнорируется, но непринудительная неудача раскрытия приводит к задержке доставки. Раскрытый тэг может содержать любые печатные символы, кроме “/”. Непечатные символы в строке - игнорируются; если результирующая строка пустая - она игнорируется. Если она начинается с алфавитно-цифрового символа - вставляется начальное двоеточие.

.. _ch26_07:

Использование файла **maildirsize**
-----------------------------------

Если истинен параметр **maildir_use_size_file**, Exim осуществляет правила “maildir++”, для хранения квоты и информации о размере файла в файле с именем *maildirsize*, в директории *maildir* верхнего уровня. Если этот файл не существует, Exim создаст его, устанавливая квоту из транспортного параметра **quota**. Если не существует сам каталог “maildir”, он его создаст до любых попыток записать файл *maildirsize*.

Файл *maildirsize* используется для хранения информации о размерах сообщений в “maildir”, ускоряя подсчёт квоты. Значение квоты в файле - всего лишь кэш; если квота изменяется в транспорте, новое значение перезаписывает кэшированное при доставке следующего сообщения. Кэш поддерживается для других программ, которые обращаются к “maildir” и должны знать квоту.

Если параметр **quota** в транспорте не задана, или равна нулю, файл “maildirsize” поддерживается (с нулевой установкой квоты), но никакой квоты не накладывается.

Для контроля, какие каталоги используются в вычислении квоты при использовании файла *maildirsize*, доступно регулярное выражение. Для дополнительных деталей, смотрите **maildir_quota_directory_regex**, выше.

.. _ch26_08:

Доставка **mailstore**
----------------------

Если истинен параметр **mailstore_format**, каждое сообщение записывается как два файла в данной директории. Уникальное базовое имя создаётся из идентификатора сообщения, и текущего процесса доставки, и файлы записываются с использованием этого базового имени, плюс суффиксов *.env* и *.msg*. Файл *.env* содержит конверт сообщения, и файл *.msg* - непосредственно сообщение. Базовое имя помещается в переменную $mailstore_basename.

В процессе доставки, конверт, вначале, записывается в файл суффикс *.tmp*. Затем пишется файл *.msg*, и по завершении записи, файл *.tmp* переименовывается в файл *.env*. Программы, обращающиеся к сообщениям, должны ожидать появления обоих файлов - *.env* и *.msg*, до доступа к любому из них. Альтернативный подход заключается в ожидании исчезновения файла *.tmp*.

Файл конверта начинается с любого текста, заданного параметром **mailstore_prefix**, раскрытой и завершённой символом новой строки, если таковой отсутствует. Затем следует адрес отправителя в одной строке, затем все адреса получателей - по одному на строке.Может быть более одного получателя лишь в случае, если значение параметра **batch_max** более одного. В конце, раскрывается **mailstore_suffix** и результат добавляется в файл, сопровождаемый символом новой строки, если он им не заканчивается.

Если раскрытие **mailstore_prefix** или **mailstore_suffix** завершается принудительной неудачей - они игнорируются. Другие ошибки раскрытия рассматриваются как конфигурационные ошибки, и доставка задерживается. Переменная $mailstore_basename доступна для использования в процессе этих раскрытий.

.. _ch26_09:

Неспециальная доставка в новый файл
-----------------------------------

Если не установлены ни **maildir_format** ни **mailstore_format**, непосредственно в названном каталоге создаётся единичный новый файл. Например, при доставке сообщений в файлы в пакетном формате SMTP, для позднейшей доставки на другой хост (смотрите раздел :ref:`45.10 <ch45_10>`), могут использоваться установки типа таких::

    directory = /var/bsmtp/$host
   
Сообщение записывается в файл с временным именем, которое переименовывается, когда доставка завершена. Финальное имя файла получается путём раскрытия параметра **directory_file**.

.. [#] редиректа [redirection] - прим. lissyara
.. [#] может быть - распределённый - прим. lissyara
